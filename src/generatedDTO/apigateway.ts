/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/accident-insurance/v1/sports": {
    /** Возвращает Sravni.ApiGateway.Service.AccidentInsurance.v1.Models.SportResult. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.AccidentInsurance.v1.Models.SportResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.AccidentInsurance.v1.Models.SportResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.AccidentInsurance.v1.Models.SportResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/bank-guarantees/v1/status/update": {
    /** Обновление статуса заявки БГ от Teledoc */
    post: {
      /** @description Модель DemandStatusOutputDto от Teledoc */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusOutputDto"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusOutputDto"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusOutputDto"];
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/bank-guarantees/v1/status/update/bitrix/{id}": {
    /** Обновление статуса заявки БГ от Teledoc */
    post: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/dadata/v1/clean/passport": {
    /**
     * Стандартизация паспортов
     * @description https://dadata.ru/api/clean/passport/
     */
    post: {
      /** @description Тело запроса */
      requestBody?: {
        content: {
          "application/json": unknown;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/dadata/v1/clean/name": {
    /**
     * Стандартизация имён
     * @description https://dadata.ru/api/clean/name/
     */
    post: {
      /** @description Тело запроса */
      requestBody?: {
        content: {
          "application/json": unknown;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/dadata/v1/clean/vehicle": {
    /**
     * Стандартизация автомобилей
     * @description https://dadata.ru/api/clean/vehicle/
     */
    post: {
      /** @description Тело запроса */
      requestBody?: {
        content: {
          "application/json": unknown;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/dadata/v1/clean/address": {
    /**
     * Стандартизация адресов
     * @description https://dadata.ru/api/clean/address/
     */
    post: {
      /** @description Тело запроса */
      requestBody?: {
        content: {
          "application/json": unknown;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/dadata/v1/suggest/fio": {
    /**
     * Подсказки по ФИО
     * @description https://dadata.ru/api/suggest/name/
     */
    post: {
      /** @description Тело запроса */
      requestBody?: {
        content: {
          "application/json": unknown;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/dadata/v1/suggest/address": {
    /**
     * Подсказки по адресам
     * @description https://dadata.ru/api/suggest/address/
     */
    post: {
      /** @description Тело запроса */
      requestBody?: {
        content: {
          "application/json": unknown;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/dadata/v1/suggest/party": {
    /**
     * Подсказки по организациям
     * @description https://dadata.ru/api/suggest/party/
     */
    post: {
      /** @description Тело запроса */
      requestBody?: {
        content: {
          "application/json": unknown;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/dadata/v1/suggest/okved2": {
    /**
     * Подсказки по ОКВЭД 2
     * @description https://dadata.ru/api/suggest/okved2/
     */
    post: {
      /** @description Тело запроса */
      requestBody?: {
        content: {
          "application/json": unknown;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/dadata/v1/find/okved2": {
    /**
     * Поиск ОКВЭД 2
     * @description https://dadata.ru/api/suggest/okved2/
     */
    post: {
      /** @description Тело запроса */
      requestBody?: {
        content: {
          "application/json": unknown;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/dadata/v1/find/party": {
    /**
     * Находит компанию или ИП по ИНН или ОГРН. Возвращает все доступные сведения о компании,
     * в отличие от метода suggest, который возвращает только базовые поля.
     * @description https://dadata.ru/api/find-party/
     */
    post: {
      /** @description Тело запроса */
      requestBody?: {
        content: {
          "application/json": unknown;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/dadata/v1/find/bank": {
    /**
     * Находит банк по любому из идентификаторов: БИК, SWIFT, ИНН, ИНН + КПП (для филиалов), регистрационному
     * номеру, присвоенному Банком России.
     * @description https://dadata.ru/api/find-bank/
     */
    post: {
      /** @description Тело запроса */
      requestBody?: {
        content: {
          "application/json": unknown;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/dl/{osago}/{policies}/{year}/{month}/{day}/{orderId}/{orderHash}/{policyName}": {
    /** Получение полиса в формате pdf */
    get: {
      parameters: {
        path: {
          osago: string;
          policies: string;
          /** @description Год */
          year: string;
          /** @description Месяц */
          month: string;
          /** @description День */
          day: string;
          /** @description Id заказа */
          orderId: string;
          /** @description Hash заказа */
          orderHash: string;
          /** @description Название полиса */
          policyName: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/toi/partners/quickquote/v2.0/json": {
    /** Возвращает ответ от тинькофф */
    post: {
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/location/v1/locations": {
    /** Ищет населённые пункты по route */
    get: {
      parameters: {
        query: {
          /** @description Максимальное количество результатов */
          limit?: number;
          /** @description Шаблон роута. Состоит из чисел разделённых точками. Заканчивается на точку или *. */
          route: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/location/v1/locations/by-alias/{alias}": {
    /** Возвращает локакицю по её алиасу */
    get: {
      parameters: {
        path: {
          /** @description Алиас локации */
          alias: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/location/v1/locations/regions": {
    /** Возвращает субъекты федерации. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/location/v1/locations/regional-centers": {
    /** Возвращает список региональных центров */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/location/v1/locations/top": {
    /** Возвращает список популярных городов. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/messagesender/v1/messages": {
    /** Отправляет SMS-сообщение */
    post: {
      /** @description Параметры сообщения */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.MessageSender.v1.Models.SendMessageRequest"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.MessageSender.v1.Models.SendMessageRequest"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.MessageSender.v1.Models.SendMessageRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.MessageSender.v1.Models.SendMessageResponse"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.MessageSender.v1.Models.SendMessageResponse"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.MessageSender.v1.Models.SendMessageResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/mortgage-insurance/v1/banks": {
    /** Возвращает список всех Sravni.ApiGateway.Service.MortgageInsurance.v1.Models.SimpleBank, для которых у нас есть активные (включённые) продукты. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.MortgageInsurance.v1.Models.SimpleBanksResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.MortgageInsurance.v1.Models.SimpleBanksResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.MortgageInsurance.v1.Models.SimpleBanksResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/news/v1/newsletters/{codeName}": {
    /** Возвращает доступные рассылки на текущий час по коду. */
    get: {
      parameters: {
        path: {
          codeName: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.News.v1.Models.NewsLetter"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.News.v1.Models.NewsLetter"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.News.v1.Models.NewsLetter"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/reports/v1/osago/reports/searches/counts": {
    /** получение кол-ва расчетов */
    get: {
      parameters: {
        query?: {
          /** @description дата начала */
          dateFrom?: string;
          /** @description дата конца */
          dateTo?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Collections.Generic.List`1[[Sravni.ApiGateway.Service.Report.v1.Models.ReportItem, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Collections.Generic.List`1[[Sravni.ApiGateway.Service.Report.v1.Models.ReportItem, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Collections.Generic.List`1[[Sravni.ApiGateway.Service.Report.v1.Models.ReportItem, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/reports/v1/osago/reports/orders/counts": {
    /** получение кол-ва заказов */
    get: {
      parameters: {
        query?: {
          /** @description дата начала */
          dateFrom?: string;
          /** @description дата конца */
          dateTo?: string;
          /** @description страховая */
          companyId?: number;
          /** @description акцептован? */
          isAccepted?: boolean;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Collections.Generic.List`1[[Sravni.ApiGateway.Service.Report.v1.Models.ReportItem, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Collections.Generic.List`1[[Sravni.ApiGateway.Service.Report.v1.Models.ReportItem, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Collections.Generic.List`1[[Sravni.ApiGateway.Service.Report.v1.Models.ReportItem, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/reports/v1/reports/partners/orders": {
    /** получение заказов партнера */
    get: {
      parameters: {
        query: {
          /** @description ??? */
          encryptId: string;
          /** @description Id партнёра */
          partnerId: number;
          /** @description Source партнёра */
          partnerSource: string;
          /** @description ??? */
          dateFrom: string;
          /** @description ??? */
          dateTo: string;
          /** @description ??? */
          isAccepted?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Report.v1.Models.PartnerOrdersResult"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Report.v1.Models.PartnerOrdersResult"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Report.v1.Models.PartnerOrdersResult"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/reviews/v1/with-user-data/list": {
    /**
     * Возвращает список отзывов
     * С персональными данными пользователя
     * Закрыта вайтлистом по айпишникам
     */
    get: {
      parameters: {
        query?: {
          /** @description Номер страницы для постраничного вывода начиная с 0 */
          PageIndex?: number;
          /** @description Количество запрашиваемых сущностей в диапазоне от 1 до 100 */
          PageSize?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewWithUserDataModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewWithUserDataModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewWithUserDataModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/reviews/v1/with-user-data/sorted-by-event-list": {
    /**
     * Возвращает список отзывов, отсортированных по определённому событию
     * С персональными данными пользователя
     * Закрыта вайтлистом по айпишникам
     */
    get: {
      parameters: {
        query?: {
          /** @description Тип ивента по которому фильтруются сортируются отзывы */
          EventType?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewActivityEventType"];
          /** @description Индекс страницы */
          PageIndex?: number;
          /** @description Количество запрашиваемых сущностей */
          PageSize?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewWithUserDataSortedByEventModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewWithUserDataSortedByEventModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewWithUserDataSortedByEventModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/reviews/v1/list": {
    /** Возвращает список отзывов */
    get: {
      parameters: {
        query?: {
          /** @description Номер страницы для постраничного вывода начиная с 0 */
          PageIndex?: number;
          /** @description Количество запрашиваемых сущностей в диапазоне от 1 до 100 */
          PageSize?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/reviews/v1/sorted-by-event-list": {
    /** Возвращает список отзывов, отсортированных по определённому событию */
    get: {
      parameters: {
        query?: {
          /** @description Тип ивента по которому фильтруются сортируются отзывы */
          EventType?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewActivityEventType"];
          /** @description Индекс страницы */
          PageIndex?: number;
          /** @description Количество запрашиваемых сущностей */
          PageSize?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewSortedByEventModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewSortedByEventModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewSortedByEventModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/suggest/v1/locations": {
    /** Возвращает данные о локациях части названия. */
    get: {
      parameters: {
        query?: {
          /** @description Префикс названия локации */
          q?: string;
          /** @description Максимальное количество результатов */
          limit?: number;
          /** @description Включать в результаты сёла и деревни */
          includeVillages?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Locations.v1.Models.Location"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/suggest/v1/names": {
    /** Получает имена начинающиеся на префикс. */
    get: {
      parameters: {
        query?: {
          /** @description Максимальное количество результатов */
          take?: number;
          /** @description Префикс названия локации */
          startWith?: string;
          /** @description Пол */
          gender?: components["schemas"]["Sravni.ApiGateway.Service.Suggest.v1.Models.Gender"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Suggest.v1.Models.Name"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Suggest.v1.Models.Name"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Suggest.v1.Models.Name"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/suggest/v1/surnames": {
    /** Получает фамилии начинающиеся на префикс. */
    get: {
      parameters: {
        query?: {
          /** @description Максимальное количество результатов */
          take?: number;
          /** @description Префикс названия локации */
          startWith?: string;
          /** @description Пол */
          gender?: components["schemas"]["Sravni.ApiGateway.Service.Suggest.v1.Models.Gender"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Suggest.v1.Models.Name"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Suggest.v1.Models.Name"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Suggest.v1.Models.Name"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/suggest/v1/patronymics": {
    /** Получает отчества начинающиеся на префикс. */
    get: {
      parameters: {
        query?: {
          /** @description Максимальное количество результатов */
          take?: number;
          /** @description Префикс названия локации */
          startWith?: string;
          /** @description Пол */
          gender?: components["schemas"]["Sravni.ApiGateway.Service.Suggest.v1.Models.Gender"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Suggest.v1.Models.Name"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Suggest.v1.Models.Name"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Suggest.v1.Models.Name"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/suggest/v1/passport-authority": {
    /** Возвращает наименование органа выдавшего паспорт по коду подразделения и дате выдачи. */
    get: {
      parameters: {
        query: {
          /** @description Код подразделения */
          divisionCode: string;
          /** @description Дата выдачи */
          dateOfIssue: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/url-shrinker/v1/private": {
    /** Создаёт приватную короткую ссылку */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.UrlShrinker.v1.Models.CreatePrivateRequest"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.UrlShrinker.v1.Models.CreatePrivateRequest"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.UrlShrinker.v1.Models.CreatePrivateRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.UrlShrinker.v1.Models.PrivateResponse"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.UrlShrinker.v1.Models.PrivateResponse"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.UrlShrinker.v1.Models.PrivateResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/auto/v1/brands": {
    /** Возвращает список авто-производителей с моделями начиная с minYear года выпуска */
    get: {
      parameters: {
        query?: {
          /** @description Минимальный год выпуска модели */
          yearFrom?: number;
          /** @description Только популярные брэнды */
          onlyPopular?: boolean;
          /** @description Категории ВУ */
          categories?: ("A" | "B")[];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.BrandViewModel"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.BrandViewModel"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.BrandViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/auto/v1/model/{modelId}": {
    /** Возвращает модель по идентификатору modelId */
    get: {
      parameters: {
        path: {
          /** @description Id модели */
          modelId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModelWithCategory"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModelWithCategory"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModelWithCategory"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/auto/v1/brand/{brandId}": {
    /** Возвращает бренд по идентификатору brandId */
    get: {
      parameters: {
        path: {
          /** @description Id производителя */
          brandId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.BrandViewModel"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.BrandViewModel"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.BrandViewModel"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/auto/v1/brand/{brandId}/models": {
    /**
     * Возвращает список моделей производетеля brandId
     * начиная с year года выпуска.
     */
    get: {
      parameters: {
        query?: {
          /** @description Год выпуска */
          year?: number;
          /** @description Категории ВУ */
          categories?: ("A" | "B")[];
        };
        path: {
          /** @description Id производителя */
          brandId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModel"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModel"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/auto/v1/brand/{brandId}/years": {
    /** Возвращает список с годами выпуска моделей авто-производителя brandId */
    get: {
      parameters: {
        path: {
          /** @description Id производителя */
          brandId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number[];
            "application/json": number[];
            "text/json": number[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/auto/v1/model/{modelId}/years": {
    /** Возвращает список с годами выпуска модели modelId */
    get: {
      parameters: {
        query?: {
          /** @description Категории ВУ */
          categories?: ("A" | "B")[];
        };
        path: {
          /** @description Id модели */
          modelId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number[];
            "application/json": number[];
            "text/json": number[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/auto/v1/brand/{brandId}/years/{year}/models": {
    /**
     * Возвращает список моделей производетеля brandId
     * года выпуска year.
     */
    get: {
      parameters: {
        query?: {
          /** @description Категории ВУ */
          categories?: ("A" | "B")[];
        };
        path: {
          /** @description Id производителя */
          brandId: number;
          /** @description Год выпуска */
          year: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModel"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModel"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/auto/v1/brand/{brandId}/years/{year}/models/{modelId}/modifications": {
    /** Получение модификаций бренда по году выпуска и модели */
    get: {
      parameters: {
        query?: {
          /** @description Категории ВУ */
          categories?: ("A" | "B")[];
        };
        path: {
          /** @description Id производителя */
          brandId: number;
          /** @description Id модели */
          modelId: number;
          /** @description Год выпуска */
          year: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModificationsResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModificationsResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModificationsResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/auto/v1/brand/{brandId}/years/{year}/models/{modelId}/powers/{power}/modifications": {
    /** Получение модификаций для передачи в запрос */
    get: {
      parameters: {
        query?: {
          /** @description Доступные категории ВУ */
          categories?: ("A" | "B")[];
        };
        path: {
          /** @description Id производителя */
          brandId: number;
          /** @description Id модели */
          modelId: number;
          /** @description Год выпуска */
          year: number;
          /** @description Л.с. */
          power: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModificationViewModel"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModificationViewModel"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModificationViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/auto/v1/brand/{alias}": {
    /** Получение производителя по его алиасу */
    get: {
      parameters: {
        path: {
          /** @description Алиас производителя */
          alias: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.BrandViewModel"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.BrandViewModel"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.BrandViewModel"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/auto/v1/brand/{brandId}/model/{modelAlias}": {
    /** Получение модели с алиасом modelAlias производителя brandId. */
    get: {
      parameters: {
        path: {
          /** @description Id производителя */
          brandId: number;
          /** @description Алиас модели */
          modelAlias: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModel"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModel"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModel"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/auto/v1/brand/{brandId}/years/{year}/models/{modelId}/engine-powers": {
    /** Получение л.с. по бренду, модели и г.в. */
    get: {
      parameters: {
        query?: {
          /** @description Категории ВУ */
          categories?: ("A" | "B")[];
        };
        path: {
          /** @description Id производителя */
          brandId: number;
          /** @description Id модели */
          modelId: number;
          /** @description Год выпуска */
          year: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number[];
            "application/json": number[];
            "text/json": number[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/relatedcar/v1/carprice/notify": {
    /** Создает новый заказ ипотечной заявки. */
    post: {
      /** @description Запрос для обновления статуса по заявке CarPrice */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.RelatedCar.Models.CarPriceUpdateRequest"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.RelatedCar.Models.CarPriceUpdateRequest"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.RelatedCar.Models.CarPriceUpdateRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/agents/v1/agents/query": {
    /** Сохранение черновика ОСАГО в агентский кабинет */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Agents.OsagoQueryAgents"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Agents.OsagoQueryAgents"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Agents.OsagoQueryAgents"];
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/agents/v1/rko": {
    /** Получение черновиков РКО из АК */
    get: {
      parameters: {
        query?: {
          /** @description Дата начала выборки */
          DateFrom?: string;
          /** @description Дата окончания выборки */
          DateTo?: string;
          /** @description Банк */
          CompanyId?: number;
          /** @description Фильтр по статусу заявки */
          Status?: components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.Rko.Enums.RkoStatusFilter"];
          /** @description ИП/ЮЛ */
          LegalEntity?: components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.Rko.Enums.LegalEntityFieldFilter"];
          /** @description Текстовый фильтр для выборки заявок */
          Filter?: string;
          /** @description Сортировка выборки по названию поля в полисе */
          OrderBy?: string;
          /** @description Направление сортировки (asc, desc) */
          SortPath?: string;
          /** @description Количество заявок, которое необходимо получить */
          Take?: number;
          /** @description Количество заявок, которое необходимо пропустить */
          Skip?: number;
          /** @description Флаг фильтриции по UpdateStatusDate. */
          ByUpdateStatusDate?: boolean;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
    /** Отправка заявки РКО и сохранение соответствующего черновика в агентский кабинет */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.Rko.AgentsRkoSaveQueryRequest"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.Rko.AgentsRkoSaveQueryRequest"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.Rko.AgentsRkoSaveQueryRequest"];
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/agents/v1/rko/status/{id}": {
    /** Получение статуса заявки РКО в АК по идентификатору */
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/agents/v1/rko/products": {
    /** Получение предложений на оформление РКО */
    get: {
      parameters: {
        query?: {
          /** @description Юридический статус: ip/ooo */
          legalEntity?: components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.Rko.Enums.LegalEntityFieldFilter"];
          /** @description Название населенного пункта */
          location?: string;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/agents/v1/business-loan/propositions": {
    /** Получение доступных предложений по кредитам для МСБ. */
    get: {
      parameters: {
        query?: {
          /** @description Количество для получения. */
          take?: number;
          /** @description Количество для пропуска. */
          skip?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.Rko.AgentListResponse`1[[Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanPropositionDto, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.Rko.AgentListResponse`1[[Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanPropositionDto, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.Rko.AgentListResponse`1[[Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanPropositionDto, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/agents/v1/business-loan/create": {
    /** Создание заявки на кредит для МСБ. */
    post: {
      parameters: {
        query?: {
          /** @description Идентификатор предложения. */
          propositionId?: number;
        };
      };
      /** @description Данные для заявки. */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanQueryDto"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanQueryDto"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanQueryDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanFormResponseDto"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanFormResponseDto"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanFormResponseDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/agents/v1/business-loan/{id}": {
    /** Получение статуса текущей заявки по кредитам для МСБ. */
    get: {
      parameters: {
        path: {
          /** @description Идентификатор, полученный при создании заявки. */
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanRequestDetailedResponseDto"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanRequestDetailedResponseDto"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanRequestDetailedResponseDto"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/agents/v1/scoring/excel": {
    /**
     * Получение результатов проверки по GUID,
     * полученному при обращении к M:Sravni.ApiGateway.Service.Agents.AgentsController.StartScoringFromExcel(Microsoft.AspNetCore.Http.IFormFile,System.Int32[],System.Threading.CancellationToken).
     */
    get: {
      parameters: {
        query?: {
          scoringGuid?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Agents.ScoringOperationInfoDto"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Agents.ScoringOperationInfoDto"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Agents.ScoringOperationInfoDto"];
          };
        };
      };
    };
    /**
     * Массовая проверка по ИНН и/или телефону, содержащимся в xls-документе.
     * Для корректной работы в документе должны присутствовать колонки "ИНН" и "Телефон".
     */
    post: {
      parameters: {
        query?: {
          bankIds?: number[];
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            scoringRequestFile: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/agents/v1/mortgage-requests/{id}": {
    /** Изменение статуса ипотечной заявки. */
    put: {
      parameters: {
        path: {
          /** @description Идентификатор заявки. */
          id: number;
        };
      };
      /** @description Модель обновления ипотечной заявки. */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.MortgageRequests.UpdateMortgageRequestDto"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.MortgageRequests.UpdateMortgageRequestDto"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.MortgageRequests.UpdateMortgageRequestDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/agents/v1/mortgage-requests": {
    /** Создает новый заказ ипотечной заявки. */
    post: {
      /** @description DTO объект для создания ипотечной заявки. */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.MortgageRequests.CreateMortgageRequestDto"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.MortgageRequests.CreateMortgageRequestDto"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.MortgageRequests.CreateMortgageRequestDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/debt-accruals/v1/notify/autoaccrual": {
    /** Уведобление о штрафе на авто */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.DebtAccruals.Models.AutoDebtNotifyRequest"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.DebtAccruals.Models.AutoDebtNotifyRequest"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.DebtAccruals.Models.AutoDebtNotifyRequest"];
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/calculate": {
    /** Запуск расчёта ОСАГО. */
    post: {
      requestBody?: {
        content: {
          "multipart/form-data": {
            /**
             * Format: int32
             * @description id бренда ТС
             */
            BrandId?: number;
            /**
             * Format: int32
             * @description год выпуска ТС
             */
            Year?: number;
            /**
             * Format: int32
             * @description id модели ТС
             */
            ModelId?: number;
            /** @description Модификация */
            Modification?: string;
            /** @description Название кузова + дверность (необязательно) */
            BodyName?: string;
            /** @description Резидент РФ? */
            IsResident?: boolean;
            /** @description канонический id региона регистрации */
            RegistrationRoute?: string;
            /** @description населенный пункт регистрации (необязательно) */
            Registration?: string;
            /** @description канонический id региона покупки */
            GettingRoute?: string;
            /** @description населенный пункт получения (необязательно) */
            Getting?: string;
            /**
             * Format: int32
             * @description мощность ТС
             */
            EnginePower?: number;
            /** @description запись вида: 1.5 (123.00 л.с.) */
            EngineSp?: string;
            /**
             * Format: int32
             * @description использование в течение года. сколько месяцев (10 и более = год)
             */
            UsageMonthsPerYear?: number;
            /** @description Дата начала договора || расчета кбм */
            PolicyStartDate?: string;
            /**
             * Format: int32
             * @description ограничение по водителям
             */
            "DriversInfo.DriverAmount"?: number;
            /** @description список водителей */
            "DriversInfo.Drivers"?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DriverInfo"][];
            /**
             * Format: int32
             * @description интервал возраста для расчета осаго
             */
            "DriversInfo.UnnamedDrivers.Age"?: number;
            /**
             * Format: int32
             * @description интервал стажа для расчета осаго
             */
            "DriversInfo.UnnamedDrivers.Experience"?: number;
            /** @description VIN ТС */
            Vin?: string;
            /** @description Номер кузова */
            BodyNumber?: string;
            /** @description Номер Шасси */
            ChassisNumber?: string;
            /**
             * Format: uuid
             * @description уникальный id пользователя
             */
            XUserId?: string;
            /**
             * Format: int32
             * @description id пользователя в системе сравни.ру
             */
            UserId?: number;
            /** @description Фамилия */
            "Owner.LastName"?: string;
            /** @description Имя */
            "Owner.FirstName"?: string;
            /** @description Отчество */
            "Owner.MiddleName"?: string;
            /** @description серия паспорта */
            "Owner.Passport.Series"?: string;
            /** @description номер паспорта */
            "Owner.Passport.Number"?: string;
            /** @description Кем выдан паспорт */
            "Owner.Passport.IssuedBy"?: string;
            /** @description Дата выдачи паспорта */
            "Owner.Passport.IssueDate"?: string;
            /** @description Дата рождения */
            "Owner.BirthDate"?: string;
            /** @description Телефон */
            "Owner.Phone"?: string;
            /** @description e-mail */
            "Owner.Email"?: string;
            /** @description Адрес регистрации */
            "Owner.RegistrationAddress"?: string;
            /** @description Фамилия */
            "Insurer.LastName"?: string;
            /** @description Имя */
            "Insurer.FirstName"?: string;
            /** @description Отчество */
            "Insurer.MiddleName"?: string;
            /** @description серия паспорта */
            "Insurer.Passport.Series"?: string;
            /** @description номер паспорта */
            "Insurer.Passport.Number"?: string;
            /** @description Кем выдан паспорт */
            "Insurer.Passport.IssuedBy"?: string;
            /** @description Дата выдачи паспорта */
            "Insurer.Passport.IssueDate"?: string;
            /** @description Дата рождения */
            "Insurer.BirthDate"?: string;
            /** @description Телефон */
            "Insurer.Phone"?: string;
            /** @description e-mail */
            "Insurer.Email"?: string;
            /** @description Адрес регистрации */
            "Insurer.RegistrationAddress"?: string;
            /** @description Номер автомобиля */
            CarNumber?: string;
            /** @description Наличие ДК */
            "DiagnosticCard.TicketExisted"?: boolean;
            /** @description Номер */
            "DiagnosticCard.Number"?: string;
            /** @description Дата следующего прохождение диагностики */
            "DiagnosticCard.DateNextTO"?: string;
            /** @description Дата окончания дествия ДК */
            "DiagnosticCard.TicketDiagnosticDate"?: string;
            /** @description Серия */
            "CarDocument.Series"?: string;
            /** @description Номер */
            "CarDocument.Number"?: string;
            /** @description Дата выдачи */
            "CarDocument.Date"?: string;
            /**
             * Format: int32
             * @description Тип Документа на ТС
             */
            "CarDocument.DocumentType"?: number;
            /**
             * Format: int32
             * @description Id продукта
             */
            "Save.ProductId"?: number;
            /**
             * Format: int64
             * @description id расчета в базе данных
             */
            "Save.SearchId"?: number;
            /** @description заказ с проброса */
            "Save.IsRoute"?: boolean;
            /**
             * Format: int32
             * @description с какой компании был проброс
             */
            "Save.OriginalCompanyId"?: number;
            /** @description канал */
            "Utm.Medium"?: string;
            /** @description источник */
            "Utm.Source"?: string;
            /** @description компания */
            "Utm.Campaign"?: string;
            /** @description Контент. */
            "Utm.Content"?: string;
            /** @description Поисковый запрос. */
            "Utm.Term"?: string;
            /** @description google id */
            "Utm.UAClientId"?: string;
            /** @description доп метка */
            "Partner.SubId"?: string;
            /**
             * Format: int32
             * @description партнерские данные (Id аффилиата по hasoffers)
             */
            "Partner.AffId"?: number;
            /** @description партнерские данные (Id/externalId виджета по админке партнерки) */
            "Partner.AffSub1"?: string;
            /** @description партнерские данные */
            "Partner.AffSub2"?: string;
            /** @description партнерские данные */
            "Partner.AffSub3"?: string;
            /** @description партнерские данные */
            "Partner.AffSub4"?: string;
            /** @description партнерские данные */
            "Partner.AffSub5"?: string;
            /** @description партнерские данные (Id площадки) */
            "Partner.SourceId"?: string;
            /** @description партнерские данные (Id клика перехода на сравни.ру с паретнерской площадки) */
            "Partner.TransactionId"?: string;
            /**
             * Format: int32
             * @description партнерские данные (Id оффера по hasoffers)
             */
            "Partner.OfferId"?: number;
            /** @description Регион агента (по КЛАДР) */
            "Partner.AgentRegion"?: string;
            /** @description Id агента в системе Альфа страхования */
            "Partner.AlfaUserId"?: string;
            /** @description Id агента в системе Ренесанс страхования */
            "Partner.RenessansUserId"?: string;
            /** @description канал */
            "Partner.Medium"?: string;
            /** @description источник */
            "Partner.Source"?: string;
            /** @description компания */
            "Partner.Campaign"?: string;
            /** @description Контент. */
            "Partner.Content"?: string;
            /** @description Поисковый запрос. */
            "Partner.Term"?: string;
            /** @description google id */
            "Partner.UAClientId"?: string;
            /** @description источник */
            "PromotionQuery.Source"?: string;
            /** @description компания */
            "PromotionQuery.Campaign"?: string;
            "PromotionQuery.Category"?: string;
            "PromotionQuery.Sub1"?: string;
            "PromotionQuery.Sub2"?: string;
            /** @description страница успеха */
            "ReturnUrls.SuccesUrl"?: string;
            /** @description страница не успеха */
            "ReturnUrls.FailureUrl"?: string;
            /** @description смс код */
            SmsCode?: string;
            /** @description токен доступа */
            AccessToken?: string;
            /** @description приблизительный расчет */
            IsApproximation?: boolean;
            /** @description Для кастомной прометки: например (Основной веб-сайт, новый сайт, мобилка и т.д.) */
            Platform?: string;
            /** @description Считать ли дополнительно пакетное каско? */
            WithCasco?: boolean;
            /** @description Пролонгация? */
            IsProlongation?: boolean;
            /**
             * Format: int32
             * @description Аккаунт под которым выполняется сохранение в СК
             */
            AccountPriority?: number;
            /** @description Метка контекстной рекламы */
            Clid?: string;
            /** @description Признак акции яндекс здоровье */
            IsHealthPromo?: boolean;
            /** @description Опциональный ключ пролонгации */
            ProlongationKey?: string;
            VehicleCategory?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.VehicleCategory"];
            /** @description Название бренда */
            BrandName?: string;
            /** @description Название модели */
            ModelName?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/calculate/{id}": {
    /** Получение результатов расчёта ОСАГО. */
    get: {
      parameters: {
        query?: {
          /** @description Получить только предложения доступные для заказа */
          onlyCanSell?: boolean;
        };
        path: {
          /** @description Id расчёта */
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.CalculationResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.CalculationResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.CalculationResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/calcthroughorders": {
    /** Запускает проверку сохранения договора ОСАГО в компаниях отличных от компании в заказе. */
    post: {
      /** @description Параметры расчёта */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoQuery"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoQuery"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoQuery"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/calcthroughorders/{encId}": {
    /** Получение результата расчета ОСАГО через договор. */
    get: {
      parameters: {
        path: {
          /** @description Идентификатор заказа (зашифрованый) */
          encId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.CalculateThroughOrderResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.CalculateThroughOrderResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.CalculateThroughOrderResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/trysave/{orderHash}": {
    /** Запускает расчет ОСАГО через сохранение договора */
    get: {
      parameters: {
        path: {
          orderHash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/trysaveresults/{orderHash}": {
    /** Получение результата проверки сохранения договора ОСАГО в компаниях отличных от компании в заказе. */
    get: {
      parameters: {
        path: {
          /** @description Хэш заказа */
          orderHash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.TrySaveResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.TrySaveResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.TrySaveResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/orders": {
    /** Создает заказ осаго у нас в системе и запускает сохранение в страховой. */
    post: {
      parameters: {
        query?: {
          /** @description Пропускать СМС с ссылкой на оплату */
          skipSms?: boolean;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            /**
             * Format: int32
             * @description id бренда ТС
             */
            BrandId?: number;
            /**
             * Format: int32
             * @description год выпуска ТС
             */
            Year?: number;
            /**
             * Format: int32
             * @description id модели ТС
             */
            ModelId?: number;
            /** @description Модификация */
            Modification?: string;
            /** @description Название кузова + дверность (необязательно) */
            BodyName?: string;
            /** @description Резидент РФ? */
            IsResident?: boolean;
            /** @description канонический id региона регистрации */
            RegistrationRoute?: string;
            /** @description населенный пункт регистрации (необязательно) */
            Registration?: string;
            /** @description канонический id региона покупки */
            GettingRoute?: string;
            /** @description населенный пункт получения (необязательно) */
            Getting?: string;
            /**
             * Format: int32
             * @description мощность ТС
             */
            EnginePower?: number;
            /** @description запись вида: 1.5 (123.00 л.с.) */
            EngineSp?: string;
            /**
             * Format: int32
             * @description использование в течение года. сколько месяцев (10 и более = год)
             */
            UsageMonthsPerYear?: number;
            /** @description Дата начала договора || расчета кбм */
            PolicyStartDate?: string;
            /**
             * Format: int32
             * @description ограничение по водителям
             */
            "DriversInfo.DriverAmount"?: number;
            /** @description список водителей */
            "DriversInfo.Drivers"?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DriverInfo"][];
            /**
             * Format: int32
             * @description интервал возраста для расчета осаго
             */
            "DriversInfo.UnnamedDrivers.Age"?: number;
            /**
             * Format: int32
             * @description интервал стажа для расчета осаго
             */
            "DriversInfo.UnnamedDrivers.Experience"?: number;
            /** @description VIN ТС */
            Vin?: string;
            /** @description Номер кузова */
            BodyNumber?: string;
            /** @description Номер Шасси */
            ChassisNumber?: string;
            /**
             * Format: uuid
             * @description уникальный id пользователя
             */
            XUserId?: string;
            /**
             * Format: int32
             * @description id пользователя в системе сравни.ру
             */
            UserId?: number;
            /** @description Фамилия */
            "Owner.LastName"?: string;
            /** @description Имя */
            "Owner.FirstName"?: string;
            /** @description Отчество */
            "Owner.MiddleName"?: string;
            /** @description серия паспорта */
            "Owner.Passport.Series"?: string;
            /** @description номер паспорта */
            "Owner.Passport.Number"?: string;
            /** @description Кем выдан паспорт */
            "Owner.Passport.IssuedBy"?: string;
            /** @description Дата выдачи паспорта */
            "Owner.Passport.IssueDate"?: string;
            /** @description Дата рождения */
            "Owner.BirthDate"?: string;
            /** @description Телефон */
            "Owner.Phone"?: string;
            /** @description e-mail */
            "Owner.Email"?: string;
            /** @description Адрес регистрации */
            "Owner.RegistrationAddress"?: string;
            /** @description Фамилия */
            "Insurer.LastName"?: string;
            /** @description Имя */
            "Insurer.FirstName"?: string;
            /** @description Отчество */
            "Insurer.MiddleName"?: string;
            /** @description серия паспорта */
            "Insurer.Passport.Series"?: string;
            /** @description номер паспорта */
            "Insurer.Passport.Number"?: string;
            /** @description Кем выдан паспорт */
            "Insurer.Passport.IssuedBy"?: string;
            /** @description Дата выдачи паспорта */
            "Insurer.Passport.IssueDate"?: string;
            /** @description Дата рождения */
            "Insurer.BirthDate"?: string;
            /** @description Телефон */
            "Insurer.Phone"?: string;
            /** @description e-mail */
            "Insurer.Email"?: string;
            /** @description Адрес регистрации */
            "Insurer.RegistrationAddress"?: string;
            /** @description Номер автомобиля */
            CarNumber?: string;
            /** @description Наличие ДК */
            "DiagnosticCard.TicketExisted"?: boolean;
            /** @description Номер */
            "DiagnosticCard.Number"?: string;
            /** @description Дата следующего прохождение диагностики */
            "DiagnosticCard.DateNextTO"?: string;
            /** @description Дата окончания дествия ДК */
            "DiagnosticCard.TicketDiagnosticDate"?: string;
            /** @description Серия */
            "CarDocument.Series"?: string;
            /** @description Номер */
            "CarDocument.Number"?: string;
            /** @description Дата выдачи */
            "CarDocument.Date"?: string;
            /**
             * Format: int32
             * @description Тип Документа на ТС
             */
            "CarDocument.DocumentType"?: number;
            /**
             * Format: int32
             * @description Id продукта
             */
            "Save.ProductId"?: number;
            /**
             * Format: int64
             * @description id расчета в базе данных
             */
            "Save.SearchId"?: number;
            /** @description заказ с проброса */
            "Save.IsRoute"?: boolean;
            /**
             * Format: int32
             * @description с какой компании был проброс
             */
            "Save.OriginalCompanyId"?: number;
            /** @description канал */
            "Utm.Medium"?: string;
            /** @description источник */
            "Utm.Source"?: string;
            /** @description компания */
            "Utm.Campaign"?: string;
            /** @description Контент. */
            "Utm.Content"?: string;
            /** @description Поисковый запрос. */
            "Utm.Term"?: string;
            /** @description google id */
            "Utm.UAClientId"?: string;
            /** @description доп метка */
            "Partner.SubId"?: string;
            /**
             * Format: int32
             * @description партнерские данные (Id аффилиата по hasoffers)
             */
            "Partner.AffId"?: number;
            /** @description партнерские данные (Id/externalId виджета по админке партнерки) */
            "Partner.AffSub1"?: string;
            /** @description партнерские данные */
            "Partner.AffSub2"?: string;
            /** @description партнерские данные */
            "Partner.AffSub3"?: string;
            /** @description партнерские данные */
            "Partner.AffSub4"?: string;
            /** @description партнерские данные */
            "Partner.AffSub5"?: string;
            /** @description партнерские данные (Id площадки) */
            "Partner.SourceId"?: string;
            /** @description партнерские данные (Id клика перехода на сравни.ру с паретнерской площадки) */
            "Partner.TransactionId"?: string;
            /**
             * Format: int32
             * @description партнерские данные (Id оффера по hasoffers)
             */
            "Partner.OfferId"?: number;
            /** @description Регион агента (по КЛАДР) */
            "Partner.AgentRegion"?: string;
            /** @description Id агента в системе Альфа страхования */
            "Partner.AlfaUserId"?: string;
            /** @description Id агента в системе Ренесанс страхования */
            "Partner.RenessansUserId"?: string;
            /** @description канал */
            "Partner.Medium"?: string;
            /** @description источник */
            "Partner.Source"?: string;
            /** @description компания */
            "Partner.Campaign"?: string;
            /** @description Контент. */
            "Partner.Content"?: string;
            /** @description Поисковый запрос. */
            "Partner.Term"?: string;
            /** @description google id */
            "Partner.UAClientId"?: string;
            /** @description источник */
            "PromotionQuery.Source"?: string;
            /** @description компания */
            "PromotionQuery.Campaign"?: string;
            "PromotionQuery.Category"?: string;
            "PromotionQuery.Sub1"?: string;
            "PromotionQuery.Sub2"?: string;
            /** @description страница успеха */
            "ReturnUrls.SuccesUrl"?: string;
            /** @description страница не успеха */
            "ReturnUrls.FailureUrl"?: string;
            /** @description смс код */
            SmsCode?: string;
            /** @description токен доступа */
            AccessToken?: string;
            /** @description приблизительный расчет */
            IsApproximation?: boolean;
            /** @description Для кастомной прометки: например (Основной веб-сайт, новый сайт, мобилка и т.д.) */
            Platform?: string;
            /** @description Считать ли дополнительно пакетное каско? */
            WithCasco?: boolean;
            /** @description Пролонгация? */
            IsProlongation?: boolean;
            /**
             * Format: int32
             * @description Аккаунт под которым выполняется сохранение в СК
             */
            AccountPriority?: number;
            /** @description Метка контекстной рекламы */
            Clid?: string;
            /** @description Признак акции яндекс здоровье */
            IsHealthPromo?: boolean;
            /** @description Опциональный ключ пролонгации */
            ProlongationKey?: string;
            VehicleCategory?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.VehicleCategory"];
            /** @description Название бренда */
            BrandName?: string;
            /** @description Название модели */
            ModelName?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/orders/{orderHash}": {
    /** Получение информации о заказе. */
    get: {
      parameters: {
        path: {
          /** @description Хэш заказа */
          orderHash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/orders/{orderHash}/sms": {
    /** Запрос смс кода от страховой компании. */
    get: {
      parameters: {
        path: {
          /** @description Хэш заказа */
          orderHash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/orders/{orderHash}/payment-url": {
    /** Получение ссылки на оплату. */
    get: {
      parameters: {
        path: {
          /** @description Хэш заказа */
          orderHash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PaymentUrlResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PaymentUrlResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PaymentUrlResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
    /** Запуск получения ссылки на оплату. */
    post: {
      parameters: {
        query?: {
          /** @description Код из смс для компании требующей подтверждения */
          smsCode?: string;
        };
        path: {
          /** @description Хэш заказа */
          orderHash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/orders/{orderHash}/confirmPayment": {
    /** Запуск подтверждения оплаты в СК. */
    post: {
      parameters: {
        path: {
          /** @description Хэш заказа */
          orderHash: string;
        };
      };
      /** @description Данные для подтверждения оплаты в СК */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ConfirmPaymentQuery"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ConfirmPaymentQuery"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ConfirmPaymentQuery"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ConfirmPaymentResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ConfirmPaymentResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ConfirmPaymentResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/orderswithtrysave/{orderHash}": {
    /** Получение информации о заказе. */
    get: {
      parameters: {
        query?: {
          /** @description Вернуть проброс даже если заказ успешен */
          withTrySave?: boolean;
        };
        path: {
          /** @description Хэш заказа */
          orderHash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveWithTrySaveResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveWithTrySaveResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveWithTrySaveResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/redirect": {
    /**
     * Получить ссылку для перехода на сайт СК.
     * @deprecated
     */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoQuery"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoQuery"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoQuery"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.RedirectResult"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.RedirectResult"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.RedirectResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/minmaxprices": {
    /** Возвращает минимальную и максимальную цены по ОСАГО в регионе по компании */
    get: {
      parameters: {
        query: {
          /** @description Роут региона */
          LocationRoute: string;
          /** @description Id компании */
          CompanyId?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.MinMaxPricesResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.MinMaxPricesResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.MinMaxPricesResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/ordertehinfo/{orderHash}": {
    /** получения короткой информации и ссылки на полис */
    get: {
      parameters: {
        query?: {
          /** @description Если заказ старый, пробуем найти более, чем за 40 дней */
          ignoreLastDnd?: boolean;
        };
        path: {
          /** @description hash доступа к заказу */
          orderHash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OrderTehInfoResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OrderTehInfoResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OrderTehInfoResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/save-query": {
    /** Сохранение параметров ОСАГО в базу данных */
    post: {
      /** @description Параметры расчёта */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ExtendedOsagoQuery"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ExtendedOsagoQuery"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ExtendedOsagoQuery"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveQueryResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveQueryResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveQueryResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/save-query-with-calculate": {
    /** Сохранение параметров ОСАГО в базу данных и запуск расчета */
    post: {
      /** @description Параметры расчёта */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ExtendedOsagoQuery"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ExtendedOsagoQuery"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ExtendedOsagoQuery"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveQueryResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveQueryResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveQueryResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/save-query-with-price": {
    /** Сохранение параметров ОСАГО в базу данных и запуск расчета */
    post: {
      /** @description Параметры расчёта */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ExtendedOsagoQuery"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ExtendedOsagoQuery"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ExtendedOsagoQuery"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveQueryWithPriceResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveQueryWithPriceResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveQueryWithPriceResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/saved-queries/{id}/{queryHash}": {
    /** Получение параметров ОСАГО из базы данных по id и hash */
    get: {
      parameters: {
        path: {
          /** @description Идентификатор расчёта */
          id: number;
          /** @description ключь доступа к квери */
          queryHash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoQuery"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoQuery"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoQuery"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/reports/orders": {
    /** Получение заказов ОСАГО из базы данных по партнерам. */
    get: {
      parameters: {
        query: {
          /** @description ??? */
          encryptId: string;
          /** @description Id партнёра */
          partnerId: number;
          /** @description Дата начала */
          dateFrom: string;
          /** @description Дата окончания */
          dateTo: string;
          /** @description Метка от партнера */
          subId?: string;
          /** @description Куплен? */
          isAccepted?: boolean;
          /** @description Доп метка 3 */
          affSub3?: string;
          /** @description Доп метка 4 */
          affSub4?: string;
          /** @description Доп метка 5 */
          affSub5?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PartnerOsagoOrderResult"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PartnerOsagoOrderResult"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PartnerOsagoOrderResult"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/agentorders": {
    /**
     * Агентские заказы
     * @deprecated
     */
    get: {
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/agentorders/statuses": {
    /** Прометка заказов агентов */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.QueryAgentOrderStatus"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.QueryAgentOrderStatus"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.QueryAgentOrderStatus"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/orders/{orderHash}/urls": {
    /**
     * Возвращает объект со ссылкой на https://www.sravni.ru/osago/.
     * @deprecated
     */
    get: {
      parameters: {
        path: {
          /** @description Хеш заказа */
          orderHash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.RedirectLink"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.RedirectLink"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.RedirectLink"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/providers": {
    /** Список провайдеров по региону */
    get: {
      parameters: {
        query?: {
          /** @description роут локейшена */
          location?: string;
          /** @description если `true` то в результате будет дополнительная информация */
          fullData?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ProviderInfo"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ProviderInfo"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ProviderInfo"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/send-calc-link": {
    /** Отправляет по электронной почте ссылку на расчет */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SendCalcLinkRequest"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SendCalcLinkRequest"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SendCalcLinkRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/send-push-sms": {
    /** Отправляет смс со ссылкой на расчет для ушедшего пользователя по хешу неоплаченного заказа */
    get: {
      parameters: {
        query?: {
          id?: number;
          hash?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/send-osago-sms": {
    /** Отправляет смс со ссылкой на главную ОСАГО */
    get: {
      parameters: {
        query?: {
          phone?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/send-sms-calc-link": {
    /** Отправляет смс со ссылкой на расчет для ушедшего пользователя по хешу неоплаченного заказа */
    get: {
      parameters: {
        query?: {
          /** @description хэш заказа */
          orderHash?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/early-leads/{id}/sms": {
    /** Отправляет смс со ссылкой на расчет для пользователя, оставившего конактные данные */
    get: {
      parameters: {
        query?: {
          queryId?: number;
          queryHash?: string;
          utm_source?: string;
          utm_medium?: string;
          utm_campaign?: string;
          utm_content?: string;
        };
        path: {
          /** @description id записи с сохраненными контактными данными */
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/orders/{orderHash}/policydrafts": {
    /** Генерация .pdf файла черновика полиса для заказа, в ответе - ссылка на скачивание */
    get: {
      parameters: {
        query?: {
          /** @description Признак, что черновик будет сгенерирован и сохранен, даже если он уже был в хранилище */
          force?: boolean;
        };
        path: {
          /** @description Хэш заказа */
          orderHash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/vsk/callback": {
    /** Сохранение колбэка от ВСК */
    post: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/payurl/order/{orderHash}": {
    /** Редирект на страницу с оплатой заказа */
    get: {
      parameters: {
        path: {
          orderHash: string;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/payurl/orderForTrash/{orderHash}": {
    /** Возвращает объект со ссылкой для редиректа на страницу оплаты заказа для заказа из проброса */
    get: {
      parameters: {
        path: {
          orderHash: string;
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/shortprolongation": {
    /** Оформление полиса, через метод коротокой пролонгации */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Prolongation.OsagoProlongationQuery"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Prolongation.OsagoProlongationQuery"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Prolongation.OsagoProlongationQuery"];
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/sovcom/checkVehicleServiceResult": {
    /** Сохранение колбэка от Совком */
    post: {
      /** @description Параметры расчёта */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CheckVehicleServiceResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CheckVehicleServiceResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CheckVehicleServiceResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/sovcom/calculateKbmResult": {
    /** Сохранение колбэка от Совком */
    post: {
      /** @description Параметры расчёта */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CalculateKbmResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CalculateKbmResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CalculateKbmResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/sovcom/calculatePolicyCostResult": {
    /** Сохранение колбэка от Совком на запрос !:CalculateKbmRequest */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CalculatePolicyCostResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CalculatePolicyCostResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CalculatePolicyCostResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/sovcom/createPolicyResult": {
    /** Сохранение колбэка от Совком на запрос !:CreatePolicyRequest */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CreatePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CreatePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CreatePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/sovcom/checkPolicy": {
    /** Сохранение колбэка от Совком на запрос !:CreatePolicyRequest */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CreatePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CreatePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CreatePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/sovcom/savePolicyResult": {
    /** Сохранение колбэка от Совком на запрос !:CreatePolicyRequest */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SavePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SavePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SavePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/sovcom/preparePolicyResult": {
    /** Сохранение колбэка от Совком на запрос !:CreatePolicyRequest */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.PreparePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.PreparePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.PreparePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
        };
      };
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/send-manual-sms": {
    /** Отправляет смс со ссылкой на расчет, созданный джобой обработки xsell */
    get: {
      parameters: {
        query?: {
          id?: number;
          hash?: string;
          phone?: string;
          utm_source?: string;
          utm_medium?: string;
          utm_campaign?: string;
          utm_content?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/send-prolong-sms": {
    /** Отправляет смс со ссылкой пролонгации */
    get: {
      parameters: {
        query?: {
          hash?: string;
          utm_source?: string;
          utm_medium?: string;
          utm_campaign?: string;
          utm_content?: string;
          type?: string;
          customer?: string;
          target?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/osago/v1/analytics/events": {
    /** Сохраняет события пролонгации */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.UserEventDto"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.UserEventDto"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.UserEventDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/leasing/v1/scoring": {
    /** Получение данных для проведения скоринга */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string[];
            "application/json": string[];
            "text/json": string[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
    /** Сохранение результатов скоринга */
    post: {
      /** @description Массив результатов скоринга */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingCompanyScoringParameters"][];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingCompanyScoringParameters"][];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingCompanyScoringParameters"][];
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/leasing/v1/requests": {
    /** Получение заявок на лизинг от клиентов, прошедших скоринг */
    get: {
      parameters: {
        query?: {
          /** @description Нижний порог фильтрации по дате создания заявки */
          CreatingDateFrom?: string;
          /** @description Верхний порог фильтрации по дате создания заявки; строго меньше указанной даты */
          CreatingDateTo?: string;
          /** @description Статус заявки */
          Status?: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingRequestStatus"];
          /** @description Количество элементов на страницу для пагинации */
          Take?: number;
          /** @description Количество элементов в выдаче, которые необходимо пропустить */
          Skip?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.PagedResponse`1[[Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingRequestOutputDto, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.PagedResponse`1[[Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingRequestOutputDto, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.PagedResponse`1[[Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingRequestOutputDto, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/leasing/v1/requests/{id}": {
    /** Установить статус и комментарий для заявки на лизинг */
    post: {
      parameters: {
        query?: {
          /** @description Новый статус */
          status?: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingRequestUpdatableStatus"];
          /** @description Комментарий по заявке */
          comment?: string;
        };
        path: {
          /** @description Id заявки */
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/leasing/v1/requests/statuses": {
    /** Установить статус для множества заявок на лизинг */
    post: {
      /** @description Параметры запроса: массив идентификаторов заявок и соответствующих статусов */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusParameters"][];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusParameters"][];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusParameters"][];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"][];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"][];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/leasing/v1/requests/{leasingRequestId}/final": {
    /** Уведомление агентского кабинета о выдаче лизинга по заявке */
    post: {
      parameters: {
        query: {
          /** @description Итоговая сумма лизинга */
          sum: number;
        };
        path: {
          /** @description Id заявки */
          leasingRequestId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/leasing/v1/requests/{leasingRequestId}/offer": {
    /** Загрузить коммерческое предложение для заявки на лизинг */
    post: {
      parameters: {
        path: {
          /** @description Id заявки на лизинг */
          leasingRequestId: number;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            ContentType?: string;
            ContentDisposition?: string;
            Headers?: {
              [key: string]: string[];
            };
            /** Format: int64 */
            Length?: number;
            Name?: string;
            FileName?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/leasing/v1/requests/managed": {
    /** Создать заявку для обработки менеджером агентского кабинета */
    put: {
      /** @description Базовая информация по заявке */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.CreateRequestDraftParameters"];
          "text/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.CreateRequestDraftParameters"];
          "application/*+json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.CreateRequestDraftParameters"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
            "application/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
            "text/json": components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "text/plain": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "application/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
            "text/json": components["schemas"]["Microsoft.AspNetCore.Mvc.ProblemDetails"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    "Microsoft.AspNetCore.Http.ConnectionInfo": {
      id?: string | null;
      remoteIpAddress?: components["schemas"]["System.Net.IPAddress"];
      /** Format: int32 */
      remotePort?: number;
      localIpAddress?: components["schemas"]["System.Net.IPAddress"];
      /** Format: int32 */
      localPort?: number;
      clientCertificate?: components["schemas"]["System.Security.Cryptography.X509Certificates.X509Certificate2"];
    };
    "Microsoft.AspNetCore.Http.HostString": {
      value?: string | null;
      hasValue?: boolean;
      host?: string | null;
      /** Format: int32 */
      port?: number | null;
    };
    "Microsoft.AspNetCore.Http.HttpContext": {
      features?: (readonly components["schemas"]["System.Collections.Generic.KeyValuePair`2[[System.Type, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"][]) | null;
      request?: components["schemas"]["Microsoft.AspNetCore.Http.HttpRequest"];
      response?: components["schemas"]["Microsoft.AspNetCore.Http.HttpResponse"];
      connection?: components["schemas"]["Microsoft.AspNetCore.Http.ConnectionInfo"];
      webSockets?: components["schemas"]["Microsoft.AspNetCore.Http.WebSocketManager"];
      user?: components["schemas"]["System.Security.Claims.ClaimsPrincipal"];
      items?: {
        [key: string]: unknown;
      } | null;
      requestServices?: components["schemas"]["System.IServiceProvider"];
      requestAborted?: components["schemas"]["System.Threading.CancellationToken"];
      traceIdentifier?: string | null;
      session?: components["schemas"]["Microsoft.AspNetCore.Http.ISession"];
    };
    "Microsoft.AspNetCore.Http.HttpRequest": {
      httpContext?: components["schemas"]["Microsoft.AspNetCore.Http.HttpContext"];
      method?: string | null;
      scheme?: string | null;
      isHttps?: boolean;
      host?: components["schemas"]["Microsoft.AspNetCore.Http.HostString"];
      pathBase?: components["schemas"]["Microsoft.AspNetCore.Http.PathString"];
      path?: components["schemas"]["Microsoft.AspNetCore.Http.PathString"];
      queryString?: components["schemas"]["Microsoft.AspNetCore.Http.QueryString"];
      query?: components["schemas"]["System.Collections.Generic.KeyValuePair`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.Extensions.Primitives.StringValues, Microsoft.Extensions.Primitives, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]"][] | null;
      protocol?: string | null;
      headers?: {
        [key: string]: string[];
      } | null;
      cookies?: components["schemas"]["System.Collections.Generic.KeyValuePair`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"][] | null;
      /** Format: int64 */
      contentLength?: number | null;
      contentType?: string | null;
      body?: components["schemas"]["System.IO.Stream"];
      bodyReader?: components["schemas"]["System.IO.Pipelines.PipeReader"];
      hasFormContentType?: boolean;
      form?: components["schemas"]["System.Collections.Generic.KeyValuePair`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.Extensions.Primitives.StringValues, Microsoft.Extensions.Primitives, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]"][] | null;
      routeValues?: {
        [key: string]: unknown;
      } | null;
    };
    "Microsoft.AspNetCore.Http.HttpResponse": {
      httpContext?: components["schemas"]["Microsoft.AspNetCore.Http.HttpContext"];
      /** Format: int32 */
      statusCode?: number;
      headers?: {
        [key: string]: string[];
      } | null;
      body?: components["schemas"]["System.IO.Stream"];
      bodyWriter?: components["schemas"]["System.IO.Pipelines.PipeWriter"];
      /** Format: int64 */
      contentLength?: number | null;
      contentType?: string | null;
      cookies?: components["schemas"]["Microsoft.AspNetCore.Http.IResponseCookies"];
      hasStarted?: boolean;
    };
    "Microsoft.AspNetCore.Http.IResponseCookies": Record<string, never>;
    "Microsoft.AspNetCore.Http.ISession": {
      isAvailable?: boolean;
      id?: string | null;
      keys?: (readonly string[]) | null;
    };
    "Microsoft.AspNetCore.Http.PathString": {
      value?: string | null;
      hasValue?: boolean;
    };
    "Microsoft.AspNetCore.Http.QueryString": {
      value?: string | null;
      hasValue?: boolean;
    };
    "Microsoft.AspNetCore.Http.WebSocketManager": {
      isWebSocketRequest?: boolean;
      webSocketRequestedProtocols?: (readonly string[]) | null;
    };
    "Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor": {
      id?: string | null;
      routeValues?: {
        [key: string]: string;
      } | null;
      attributeRouteInfo?: components["schemas"]["Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo"];
      actionConstraints?: components["schemas"]["Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata"][] | null;
      endpointMetadata?: unknown[] | null;
      parameters?: components["schemas"]["Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor"][] | null;
      boundProperties?: components["schemas"]["Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor"][] | null;
      filterDescriptors?: components["schemas"]["Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor"][] | null;
      displayName?: string | null;
      properties?: {
        [key: string]: unknown;
      } | null;
    };
    "Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor": {
      name?: string | null;
      parameterType?: components["schemas"]["System.Type"];
      bindingInfo?: components["schemas"]["Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo"];
    };
    "Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata": Record<string, never>;
    "Microsoft.AspNetCore.Mvc.ActionContext": {
      actionDescriptor?: components["schemas"]["Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor"];
      httpContext?: components["schemas"]["Microsoft.AspNetCore.Http.HttpContext"];
      modelState?: {
        [key: string]: components["schemas"]["Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry"];
      } | null;
      routeData?: components["schemas"]["Microsoft.AspNetCore.Routing.RouteData"];
    };
    "Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor": {
      filter?: components["schemas"]["Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata"];
      /** Format: int32 */
      order?: number;
      /** Format: int32 */
      scope?: number;
    };
    "Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata": Record<string, never>;
    "Microsoft.AspNetCore.Mvc.IUrlHelper": {
      actionContext?: components["schemas"]["Microsoft.AspNetCore.Mvc.ActionContext"];
    };
    "Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo": {
      bindingSource?: components["schemas"]["Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource"];
      binderModelName?: string | null;
      binderType?: components["schemas"]["System.Type"];
      propertyFilterProvider?: components["schemas"]["Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider"];
      requestPredicate?: components["schemas"]["System.Func`2[[Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.Abstractions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
      emptyBodyBehavior?: components["schemas"]["Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior"];
    };
    "Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource": {
      displayName?: string | null;
      id?: string | null;
      isGreedy?: boolean;
      isFromRequest?: boolean;
    };
    /** @enum {string} */
    "Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior": "default" | "allow" | "disallow";
    "Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider": {
      propertyFilter?: components["schemas"]["System.Func`2[[Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.Abstractions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
    };
    "Microsoft.AspNetCore.Mvc.ModelBinding.ModelError": {
      exception?: components["schemas"]["System.Exception"];
      errorMessage?: string | null;
    };
    "Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry": {
      rawValue?: Record<string, unknown> | null;
      attemptedValue?: string | null;
      errors?: (readonly components["schemas"]["Microsoft.AspNetCore.Mvc.ModelBinding.ModelError"][]) | null;
      validationState?: components["schemas"]["Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState"];
      isContainerNode?: boolean;
      children?: (readonly components["schemas"]["Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry"][]) | null;
    };
    /** @enum {string} */
    "Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState": "unvalidated" | "invalid" | "valid" | "skipped";
    "Microsoft.AspNetCore.Mvc.ProblemDetails": {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
      [key: string]: unknown;
    };
    "Microsoft.AspNetCore.Mvc.RedirectResult": {
      permanent?: boolean;
      preserveMethod?: boolean;
      url?: string | null;
      urlHelper?: components["schemas"]["Microsoft.AspNetCore.Mvc.IUrlHelper"];
    };
    "Microsoft.AspNetCore.Mvc.Routing.AttributeRouteInfo": {
      template?: string | null;
      /** Format: int32 */
      order?: number;
      name?: string | null;
      suppressLinkGeneration?: boolean;
      suppressPathMatching?: boolean;
    };
    "Microsoft.AspNetCore.Routing.IRouter": Record<string, never>;
    "Microsoft.AspNetCore.Routing.RouteData": {
      dataTokens?: {
        [key: string]: unknown;
      } | null;
      routers?: (readonly components["schemas"]["Microsoft.AspNetCore.Routing.IRouter"][]) | null;
      values?: {
        [key: string]: unknown;
      } | null;
    };
    "Microsoft.Win32.SafeHandles.SafeWaitHandle": {
      isClosed?: boolean;
      isInvalid?: boolean;
    };
    /** @description Модель спорта. */
    "Sravni.ApiGateway.Service.AccidentInsurance.v1.Models.Sport": {
      /**
       * Format: int32
       * @description Идентификатор.
       */
      id?: number;
      /** @description Название. */
      name?: string | null;
    };
    /** @description Результат со списком видов спорта. */
    "Sravni.ApiGateway.Service.AccidentInsurance.v1.Models.SportResult": {
      /** @description Список Sravni.ApiGateway.Service.AccidentInsurance.v1.Models.Sport. */
      items?: components["schemas"]["Sravni.ApiGateway.Service.AccidentInsurance.v1.Models.Sport"][] | null;
    };
    "Sravni.ApiGateway.Service.Agents.Models.Agents.CommissionModel": {
      /** Format: double */
      percent?: number;
      /** Format: double */
      relativePercent?: number | null;
      locationId?: string | null;
      isFixed?: boolean;
      locationRoute?: string | null;
      /** Format: int32 */
      companyId?: number;
      externalCompanyId?: string | null;
      /** Format: date-time */
      dateFrom?: string;
      productType?: components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.Agents.OrderProductType"];
      productSubType?: string | null;
      description?: string | null;
    };
    /** @enum {string} */
    "Sravni.ApiGateway.Service.Agents.Models.Agents.OrderProductType": "businessLoan";
    "Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanFormResponseDto": {
      fpTitle?: string | null;
      fpHtml?: string | null;
      /** Format: int64 */
      id?: number;
      /** Format: uuid */
      guid?: string;
    };
    "Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanPropositionDto": {
      /** Format: int32 */
      id?: number;
      /** Format: int64 */
      bankId?: number;
      organization?: string | null;
      name?: string | null;
      description?: string | null;
      aboutClients?: string | null;
      ip?: boolean;
      ooo?: boolean;
      /** Format: double */
      minRate?: number;
      /** Format: double */
      minSum?: number;
      /** Format: double */
      maxSum?: number;
      /** Format: int32 */
      minTime?: number;
      /** Format: int32 */
      maxTime?: number;
      pledge?: string | null;
      requirements?: string | null;
      /** Format: int32 */
      orgMinAge?: number;
      commissions?: components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.Agents.CommissionModel"][] | null;
    };
    "Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanQueryDto": {
      region?: string | null;
      fullName?: string | null;
      email?: string | null;
      location?: string | null;
      regionFull?: string | null;
      fiasId?: string | null;
      /** Format: double */
      creditAmount?: number;
      /** Format: int32 */
      creditTerm?: number;
      employeeInn?: string | null;
      organizationName?: string | null;
      phone?: string | null;
      birthDate?: string | null;
      docIssued?: string | null;
      passportCode?: string | null;
      docIssuedDate?: string | null;
      /** Format: int64 */
      passport?: number | null;
      birthSettlement?: string | null;
      registrationAddress?: string | null;
      workAddress?: string | null;
      /** Format: double */
      share?: number | null;
      isCeo?: boolean | null;
    };
    "Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanRequestDetailedResponseDto": {
      status?: string | null;
      /** Format: date-time */
      updateStatusDate?: string;
      comment?: string | null;
      /** Format: int64 */
      loanPayment?: number | null;
      /** Format: date-time */
      loanDate?: string | null;
      /** Format: int64 */
      loanAmount?: number | null;
    };
    /** @description Описывает ДТО объект создания ипотечной заявки. */
    "Sravni.ApiGateway.Service.Agents.Models.MortgageRequests.CreateMortgageRequestDto": {
      /**
       * Format: int32
       * @description Возвращает или задает идентификатор заявки для создания из стороннего сервиса.
       */
      id: number;
      /**
       * Format: int32
       * @description Возвращает или задает идентификатор агента.
       */
      agentId: number;
      /**
       * Format: double
       * @description Возвращает или задает стоимость договора.
       */
      price: number;
      /**
       * Format: date-time
       * @description Возвращает или задает дату создания.
       */
      createdDate: string;
      /** @description Возвращает или задает идентификатор банка. */
      bankId: string;
      status?: components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.MortgageRequests.MortgageRequestStatus"];
      /** @description Возвращает или задает ФИО клиента. */
      fullName: string;
      /**
       * Format: double
       * @description Возвращает или задает максимально возможный профит.
       */
      maxProfit?: number | null;
    };
    /**
     * @description Описывает статус ипотечной заявки.
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Agents.Models.MortgageRequests.MortgageRequestStatus": "new" | "waitingClientDocuments" | "platformModerated" | "waitingClientApprovalAtBank" | "customizationAccordingToClient" | "clientApproved" | "awaitingSiteApproval" | "reworkOnObject" | "objectApproved" | "dealIsSet" | "signedKOD" | "successfulTransaction" | "bankRefusal" | "tookDocuments" | "clientRefusal" | "bankRefusalObject" | "anotherBankSelected" | "banksDecisionExpired" | "dealFailed";
    /** @description ДТО для обновления ипотечной заявки. */
    "Sravni.ApiGateway.Service.Agents.Models.MortgageRequests.UpdateMortgageRequestDto": {
      /** @description Возвращает или задает идентификатор банка. */
      bankId?: string | null;
      /**
       * Format: double
       * @description Возвращает или задает стоимость.
       */
      price?: number | null;
      status?: components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.MortgageRequests.MortgageRequestStatus"];
      /**
       * Format: double
       * @description Возвращает или задает профит для заявки.
       */
      maxProfit?: number | null;
    };
    "Sravni.ApiGateway.Service.Agents.Models.Rko.AgentListResponse`1[[Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanPropositionDto, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      /** @description Заявки */
      items?: components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.BusinessLoan.BusinessLoanPropositionDto"][] | null;
      /**
       * Format: int32
       * @description Общее количество заявок
       */
      total?: number;
    };
    /** @description Модель запроса на сохранение заявки РКО */
    "Sravni.ApiGateway.Service.Agents.Models.Rko.AgentsRkoSaveQueryRequest": {
      /** @description Строковый идентификатор банка */
      stringBankId: string;
      /**
       * Format: int32
       * @description Целочисленный идентификатор банка
       */
      numericBankId?: number;
      /** @description Номер телефона клиента */
      phone: string;
      /** @description Электронная почта клиента */
      email: string;
      /** @description ФИО клиента */
      fullName: string;
      /** @description Город клиента */
      region: string;
      /** @description ИНН клиента */
      inn: string;
      /** @description Название банка */
      bankName: string;
      /** @description Идентификатор предложения */
      productId: string;
      /** @description Название предложения */
      productName: string;
      /**
       * Format: int32
       * @description Стоимость услуги
       */
      price: number;
      /** @description Название организации, для которой оформляется РКО */
      orgName: string;
      legalEntity: components["schemas"]["Sravni.ApiGateway.Service.Agents.Models.Rko.Enums.LegalEntityType"];
      /** @description Id ФИАС */
      fiasId: string;
      /** @description Название субъекта РФ */
      regionFull: string;
    };
    /**
     * @description Набор юридических статусов, по которым доступна фильтрация заявок
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Agents.Models.Rko.Enums.LegalEntityFieldFilter": "default" | "ooo" | "ip";
    /** @enum {string} */
    "Sravni.ApiGateway.Service.Agents.Models.Rko.Enums.LegalEntityType": "unknown" | "ooo" | "ip";
    /** @enum {string} */
    "Sravni.ApiGateway.Service.Agents.Models.Rko.Enums.RkoStatusFilter": "new" | "refused" | "approved" | "opened" | "activated";
    /** @description модель вью кузова авто */
    "Sravni.ApiGateway.Service.Auto.v1.Models.BodyViewModel": {
      /**
       * Format: int32
       * @description id
       */
      id?: number | null;
      /** @description название */
      name?: string | null;
    };
    /** @description Марка автомобиля */
    "Sravni.ApiGateway.Service.Auto.v1.Models.BrandViewModel": {
      /**
       * Format: int32
       * @description Id
       */
      id?: number;
      /** @description Название */
      name?: string | null;
      /** @description Алиас */
      alias?: string | null;
      /**
       * Format: int32
       * @description Популярность
       */
      popularity?: number;
      /** @description Первая буква марки */
      firstLetter?: string | null;
      /** @description Иностранная */
      isImported?: boolean;
      /** @description популярный? */
      isPopular?: boolean;
    };
    /** @description модель вью модели авто */
    "Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModel": {
      /**
       * Format: int32
       * @description id
       */
      id?: number;
      /** @description название */
      name?: string | null;
      /** @description alias */
      alias?: string | null;
    };
    /** @description модель вью модели авто */
    "Sravni.ApiGateway.Service.Auto.v1.Models.ModelViewModelWithCategory": {
      /**
       * Format: int32
       * @description id
       */
      id?: number;
      /** @description название */
      name?: string | null;
      /** @description alias */
      alias?: string | null;
      /** @description категории модели */
      categories?: string[] | null;
    };
    /** @description модель вью модификации авто */
    "Sravni.ApiGateway.Service.Auto.v1.Models.ModificationViewModel": {
      /**
       * Format: int32
       * @description id
       */
      id?: number;
      /** @description название */
      name?: string | null;
      /**
       * Format: int32
       * @description тип кузова Sravni.ApiGateway.Service.Auto.v1.Models.BodyStyle
       */
      body?: number;
      /**
       * Format: double
       * @description обьем двигателя
       */
      volume?: number | null;
      /**
       * Format: int32
       * @description мощность л.с.
       */
      power?: number | null;
      /**
       * Format: int32
       * @description тип коробки передач Sravni.ApiGateway.Service.Auto.v1.Models.TransmissionType
       */
      transmission?: number;
      /**
       * Format: int32
       * @description цена
       */
      price?: number;
      /** @description Категория */
      category?: string | null;
    };
    /** @description Модель вью для результата поиска модификаций */
    "Sravni.ApiGateway.Service.Auto.v1.Models.ModificationsResult": {
      /** @description Список уникальных кузовов из Sravni.ApiGateway.Service.Auto.v1.Models.ModificationsResult.Modifications */
      bodies?: components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.BodyViewModel"][] | null;
      /** @description Список уникальных коробок передач из Sravni.ApiGateway.Service.Auto.v1.Models.ModificationsResult.Modifications */
      transmissions?: components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.TransmissionViewModel"][] | null;
      /** @description Список модификаций */
      modifications?: components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.ModificationViewModel"][] | null;
    };
    /** @enum {string} */
    "Sravni.ApiGateway.Service.Auto.v1.Models.TransmissionType": "unknown" | "mt" | "at";
    /** @description модель вью коробки передач авто */
    "Sravni.ApiGateway.Service.Auto.v1.Models.TransmissionViewModel": {
      /**
       * Format: int32
       * @description id
       */
      id?: number;
      /** @description название */
      name?: string | null;
    };
    "Sravni.ApiGateway.Service.BankGuarantees.v1.Models.CodeWithTitle": {
      code?: string | null;
      title?: string | null;
    };
    "Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusAttachedDocumentOutputDto": {
      /** @description Тип документа */
      documentType?: string | null;
      /** @description Наименование документа */
      documentName?: string | null;
      /** @description Описание документа */
      description?: string | null;
      /** @description Загруженные файлы */
      files?: components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusFileOutputDto"][] | null;
      /** @description Номер налога платильщика документа */
      taxpayerNumber?: string | null;
    };
    "Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusCheckPointsOutputDto": {
      /** @description Заявка создана */
      isCreated?: boolean;
      /** @description Заявка одобрена */
      isAgreedProduct?: boolean;
      /** @description Заявка выпущена */
      isApproved?: boolean;
      /** @description Заявка завершена отказом банка */
      isCancelled?: boolean;
      /** @description Заявка завершена отказом не банка */
      isTerminated?: boolean;
    };
    "Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusContentOutputDto": {
      /** @description Текст комментария */
      comment?: string | null;
      /** @description Приложенные документы */
      attachedDocuments?: components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusAttachedDocumentOutputDto"][] | null;
      /** @description Запрашиваемые документы */
      requestedDocuments?: components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusRequestedDocumentOutputDto"][] | null;
      /** @description Возможные действия по задаче */
      resultActions?: components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.CodeWithTitle"][] | null;
    };
    "Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusFileOutputDto": {
      /**
       * Format: int32
       * @description Id файла
       */
      id?: number;
      /** @description Имя файла */
      name?: string | null;
      /** @description Ключ для загрузки файла */
      key?: string | null;
      /** @description Хэш SHA1 */
      hash?: string | null;
    };
    "Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusOutputDto": {
      /**
       * Format: int32
       * @description Id заявки
       */
      demandId?: number;
      /**
       * Format: int32
       * @description Id продукта
       */
      productId?: number;
      /** @description Номер заявки на продукт */
      number?: string | null;
      status?: components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.CodeWithTitle"];
      checkPoints?: components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusCheckPointsOutputDto"];
      /** @description Задачи по заявке */
      queueTasks?: components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusQueueTaskOutputDto"][] | null;
    };
    "Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusQueueTaskOutputDto": {
      /**
       * Format: int32
       * @description Id задачи
       */
      queueTaskId?: number;
      queueTaskType?: components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.CodeWithTitle"];
      /** @description Флаг для подсветки */
      isNew?: boolean;
      /**
       * Format: date-time
       * @description Дата создания
       */
      dateAdded?: string;
      /**
       * Format: date-time
       * @description Дата обновления
       */
      dateUpdated?: string;
      content?: components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusContentOutputDto"];
    };
    "Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusRequestedDocumentOutputDto": {
      /** @description Тип документа */
      documentType?: string | null;
      /** @description Наименование документа */
      documentName?: string | null;
      /** @description Описание документа */
      description?: string | null;
      /** @description Загруженные файлы */
      files?: components["schemas"]["Sravni.ApiGateway.Service.BankGuarantees.v1.Models.DemandStatusFileOutputDto"][] | null;
      /** @description Номер налога платильщика документа */
      taxpayerNumber?: string | null;
      /** @description Признак обязательного документа */
      isRequired?: boolean;
    };
    "Sravni.ApiGateway.Service.DebtAccruals.Models.AutoDebtNotifyRequest": {
      document?: components["schemas"]["Sravni.ApiGateway.Service.DebtAccruals.Models.Document"];
      /** @description Номера UIN штрафов */
      fines?: string[] | null;
    };
    "Sravni.ApiGateway.Service.DebtAccruals.Models.Document": {
      /** @description СТС */
      number?: string | null;
      /**
       * Format: int64
       * @description ID записи в системе партнера
       */
      id?: number;
      /**
       * Format: int64
       * @description Тип документа
       */
      type?: number;
    };
    "Sravni.ApiGateway.Service.Leasing.v1.Models.CreateRequestDraftParameters": {
      /** @description ФИО собственника/контактного лица */
      titleholderFullName?: string | null;
      /** @description Название организации/ИП */
      clientOrgName?: string | null;
      /** @description ИНН */
      inn: string;
      /** @description Номер телефона */
      phone: string;
    };
    /** @description Модель документа, получаемого от сервиса лизинга */
    "Sravni.ApiGateway.Service.Leasing.v1.Models.DocumentOutputDto": {
      documentTypeId?: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.DocumentType"];
      /** @description Ссылка на S3 */
      link?: string | null;
    };
    /**
     * @description Тип документа
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Leasing.v1.Models.DocumentType": "passport" | "innOgrn" | "regulation" | "memorandum" | "additional" | "offer" | "legal";
    /** @description Набор параметров прошедшей операции скоринга */
    "Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingCompanyScoringParameters": {
      /** @description ИНН, по которому проводился скоринг */
      inn: string;
      /** @description Флаг успешно прошедшего скоринга */
      isAccepted: boolean;
      /** @description Комментарий по операции (опционально) */
      comment?: string | null;
    };
    /**
     * @description Перечисление предметов лизинга
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingObjectType": "lightVehicle" | "specializedVehicle" | "cargoVehicle" | "commercialVehicle" | "inventory" | "landedEstate";
    /** @description Модель заявки на оформление лизинга */
    "Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingRequestOutputDto": {
      /**
       * Format: int32
       * @description ID заявки
       */
      id?: number;
      query?: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.QueryOuterDto"];
      status?: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingRequestStatus"];
      proposition?: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.PropositionOuterDto"];
      comment?: string | null;
      /**
       * Format: date-time
       * @description Дата создания заявки
       */
      creatingDate?: string;
      finalCommercialOffer?: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.DocumentOutputDto"];
    };
    /**
     * @description Набор статусов заявки на лизинг
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingRequestStatus": "documentsReview" | "commercialOfferPreparation" | "rejected" | "approved" | "commercialOfferProcessing" | "appointment" | "advancePayment" | "inventoryInstallation" | "issued";
    /**
     * @description Набор статусов, доступных для установки
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingRequestUpdatableStatus": "commercialOfferPreparation" | "rejected" | "appointment" | "advancePayment" | "inventoryInstallation";
    "Sravni.ApiGateway.Service.Leasing.v1.Models.PagedResponse`1[[Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingRequestOutputDto, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      /**
       * Format: int32
       * @description Общее количество объектов, удовлетворяющих запросу
       */
      total?: number;
      items?: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingRequestOutputDto"][] | null;
    };
    /** @description Модель тарифа лизинговой компании */
    "Sravni.ApiGateway.Service.Leasing.v1.Models.PropositionOuterDto": {
      /** @description Название тарифа */
      name?: string | null;
      /** @description Лого компании */
      icon?: string | null;
      /** @description Название компании */
      companyName?: string | null;
      /**
       * Format: int32
       * @description Минимальная сумма лизинга
       */
      minSum?: number;
      /**
       * Format: int32
       * @description Максимальная сумма лизинга
       */
      maxSum?: number;
      /**
       * Format: int32
       * @description Минимальный срок лизинга
       */
      minPeriodInDays?: number;
      /**
       * Format: int32
       * @description Максимальный срок лизинга
       */
      maxPeriodInDays?: number;
      /**
       * Format: float
       * @description Удорожание
       */
      appreciation?: number;
      /**
       * Format: int32
       * @description Предварительный взнос
       */
      prePayment?: number;
      /**
       * Format: int32
       * @description Требования к минимальному сроку регистрации организации
       */
      orgMinAge?: number;
      /** @description Требования в текстовом виде/прочие требвания */
      requirements?: string | null;
      /** @description Актуальность предложенния на сегодняший день */
      isClosed?: boolean;
      /** @description Допустимые лизинга */
      leasingObjects?: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingObjectType"][] | null;
    };
    /** @description Модель реквизитов по заявке на лизинг */
    "Sravni.ApiGateway.Service.Leasing.v1.Models.QueryOuterDto": {
      inn: string;
      clientTaxStatus: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.TaxStatus"];
      /** @description ФИО собственника */
      titleholderFullName: string;
      /** @description Название организации */
      clientOrgName: string;
      /** @description Город регистрации организации */
      organizationCity: string;
      /** @description Номер телефона клиента */
      phone: string;
      /** @description Электронная почта клиента */
      email?: string | null;
      leasingObjectType: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingObjectType"];
      /**
       * Format: int32
       * @description Количество предметов лизинга
       */
      leasingObjectsAmount: number;
      /**
       * Format: double
       * @description Желаемая цена (за один предмет лизинга)
       */
      preferredCost: number;
      /** @description Город получения лизинга */
      leasingAcquisitionCity: string;
      /**
       * Format: int32
       * @description Желаемый период
       */
      preferredLeasingPeriodInMonths: number;
      /** @description Комментарий клиента */
      leasingObjectSpecifications?: string | null;
      /** @description Прикрепленные документы. Набор отличается в зависимости от налогового статуса клиента */
      documents: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.DocumentOutputDto"][];
    };
    /** @description Набор параметров для установки статуса заявки на лизинг */
    "Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusParameters": {
      /**
       * Format: int32
       * @description Id заявки
       */
      leasingRequestId: number;
      status?: components["schemas"]["Sravni.ApiGateway.Service.Leasing.v1.Models.LeasingRequestUpdatableStatus"];
      /** @description Комментарий по заявке */
      comment?: string | null;
    };
    /** @description Результат обновления статуса заявки на лизинг */
    "Sravni.ApiGateway.Service.Leasing.v1.Models.SetStatusResult": {
      /** Format: int32 */
      leasingRequestId?: number;
      isSuccess?: boolean;
      errorMessage?: string | null;
    };
    /**
     * @description Перечисление налоговых статусов
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Leasing.v1.Models.TaxStatus": "individual" | "legalEntity";
    /** @description Населённый пункт */
    "Sravni.ApiGateway.Service.Locations.v1.Models.Location": {
      /**
       * Format: int32
       * @description Идентификатор
       */
      id?: number;
      /** @description Название */
      name?: string | null;
      /** @description Полное название */
      fullName?: string | null;
      /** @description Название региона */
      regionName?: string | null;
      /** @description Название в местном падеже с предлогом (в Москве, во Владивостоке) */
      nameLocative?: string | null;
      /** @description Название в родительном падеже (Москвы, Владивостока) */
      nameGenitive?: string | null;
      /** @description Роут */
      route?: string | null;
      /** @description Уникальный алиас */
      alias?: string | null;
      /** @description Тип населённого пункта */
      localityType?: string | null;
      /** @description Тип населённого пункта (сокращенное наименование) */
      shortLocationType?: string | null;
      /**
       * Format: double
       * @description широта
       */
      latitude?: number;
      /**
       * Format: double
       * @description долгота
       */
      longitude?: number;
    };
    /** @description Запрос на отправку SMS-сообщения */
    "Sravni.ApiGateway.Service.MessageSender.v1.Models.SendMessageRequest": {
      /** @description Получатель сообщения */
      reciever: string;
      /** @description Контент сообщения */
      content: string;
      /**
       * Format: uuid
       * @description Уникальный идентификатор сообщения
       */
      id?: string;
      /** @description Имя отправителя */
      sender?: string | null;
      /** @description Тип смс сообщения */
      type?: string | null;
      /** @description Тип заказчика, который инициировал отправку смс сообщения */
      customer?: string | null;
      /** @description Бизнец цель */
      target?: string | null;
      /** @description Клиент identity */
      client?: string | null;
      /** @description Название продукта */
      productName?: string | null;
      /** @description Id продуктовой сущности */
      productId?: string | null;
      /** @description Тип продукта */
      utmTerm?: string | null;
      /** @description UtmSource */
      utmSource?: string | null;
      /** @description UtmMedium */
      utmMedium?: string | null;
      /** @description UtmCampaign */
      utmCampaign?: string | null;
      /** @description UtmContent */
      utmContent?: string | null;
    };
    /** @description Результат запроса на отправку сообщения */
    "Sravni.ApiGateway.Service.MessageSender.v1.Models.SendMessageResponse": {
      /**
       * Format: uuid
       * @description Идентификатор смс-сообщения, сформированный MessageSender'ом
       */
      messageId?: string;
    };
    /** @description Обертка для результата */
    "Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]": {
      /** @description Результат */
      result?: boolean;
      /** @description Ошибка */
      error?: string | null;
    };
    /** @description Обертка для результата */
    "Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Collections.Generic.List`1[[Sravni.ApiGateway.Service.Report.v1.Models.ReportItem, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]": {
      /** @description Результат */
      result?: components["schemas"]["Sravni.ApiGateway.Service.Report.v1.Models.ReportItem"][] | null;
      /** @description Ошибка */
      error?: string | null;
    };
    /** @description Обертка для результата */
    "Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]": {
      /**
       * Format: int32
       * @description Результат
       */
      result?: number;
      /** @description Ошибка */
      error?: string | null;
    };
    /** @description Обертка для результата */
    "Sravni.ApiGateway.Service.Models.AnyResult`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]": {
      /** @description Результат */
      result?: string | null;
      /** @description Ошибка */
      error?: string | null;
    };
    /** @description Модель банка. */
    "Sravni.ApiGateway.Service.MortgageInsurance.v1.Models.SimpleBank": {
      /**
       * Format: int32
       * @description Идентификатор банка.
       */
      id?: number;
      /** @description Краткое наименование. */
      name?: string | null;
    };
    /** @description Результат со списком банков. */
    "Sravni.ApiGateway.Service.MortgageInsurance.v1.Models.SimpleBanksResult": {
      /** @description Список банков. */
      items?: components["schemas"]["Sravni.ApiGateway.Service.MortgageInsurance.v1.Models.SimpleBank"][] | null;
    };
    "Sravni.ApiGateway.Service.News.v1.Models.NewsLetter": {
      /** @description Id рассылки */
      id?: string | null;
      /** @description Сервис, которому принадлежит рассылка(для наглядности и трекинга) */
      source?: string | null;
      /**
       * @description Кодовое наименование рассылки(для множественных рассылок разного типа от одного сервиса)
       * Например `news-best-daily`, `news-top-credits-weekly`
       */
      codeName?: string | null;
      /** @description Тема письма */
      subject?: string | null;
      /** @description Pre-Header письма */
      preHeader?: string | null;
      /**
       * Format: date-time
       * @description Дата запуска
       */
      runAt?: string;
      /** @description Поля объекта, структура контента согласовывается под рассылку, могут быть массивы, объекты */
      properties?: ({
        [key: string]: Record<string, unknown> | null;
      }) | null;
    };
    /** @description Рекомендация по исключению водителя с худшим коэффициентом возраста/стажа */
    "Sravni.ApiGateway.Service.Osago.v1.Models.AgeExperienceRecommendation": {
      worstDriverFirstName?: string | null;
      worstDriverLastName?: string | null;
      worstDriverMiddleName?: string | null;
      /** Format: date-time */
      worstDriverBirthDate?: string;
      /** Format: double */
      worstDriverAgeExperienceCoeff?: number;
      /** Format: double */
      economyMin?: number;
      /** Format: double */
      economyMax?: number;
      text?: string | null;
    };
    /** @description Период страхования */
    "Sravni.ApiGateway.Service.Osago.v1.Models.Agents.InsurancePeriod": {
      /**
       * Format: date-time
       * @description Дата начала периода
       */
      periodBegin?: string;
      /**
       * Format: date-time
       * @description Дата окончания периода
       */
      periodEnd?: string;
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Agents.OsagoQueryAgents": {
      /**
       * Format: int32
       * @description id бренда ТС
       */
      brandId?: number;
      /**
       * Format: int32
       * @description год выпуска ТС
       */
      year?: number;
      /**
       * Format: int32
       * @description id модели ТС
       */
      modelId?: number;
      /** @description Модификация */
      modification?: string | null;
      /** @description Название кузова + дверность (необязательно) */
      bodyName?: string | null;
      /** @description Резидент РФ? */
      isResident?: boolean;
      /** @description канонический id региона регистрации */
      registrationRoute?: string | null;
      /** @description населенный пункт регистрации (необязательно) */
      registration?: string | null;
      /** @description канонический id региона покупки */
      gettingRoute?: string | null;
      /** @description населенный пункт получения (необязательно) */
      getting?: string | null;
      /**
       * Format: int32
       * @description мощность ТС
       */
      enginePower?: number;
      /** @description запись вида: 1.5 (123.00 л.с.) */
      engineSp?: string | null;
      /**
       * Format: int32
       * @description использование в течение года. сколько месяцев (10 и более = год)
       */
      usageMonthsPerYear?: number;
      /** @description Дата начала договора || расчета кбм */
      policyStartDate?: string | null;
      driversInfo?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DriversInfo"];
      /** @description VIN ТС */
      vin?: string | null;
      /** @description Номер кузова */
      bodyNumber?: string | null;
      /** @description Номер Шасси */
      chassisNumber?: string | null;
      /**
       * Format: uuid
       * @description уникальный id пользователя
       */
      xUserId?: string | null;
      /**
       * Format: int32
       * @description id пользователя в системе сравни.ру
       */
      userId?: number | null;
      owner?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoPerson"];
      insurer?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoPerson"];
      /** @description Номер автомобиля */
      carNumber?: string | null;
      diagnosticCard?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DiagnosticCard"];
      carDocument?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.CarDocumentInfo"];
      save?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveQuery"];
      utm?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoUtmQuery"];
      partner?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoPartnerQuery"];
      promotionQuery?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PromotionQuery"];
      returnUrls?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ReturnUrls"];
      /** @description смс код */
      smsCode?: string | null;
      /** @description токен доступа */
      accessToken?: string | null;
      /** @description приблизительный расчет */
      isApproximation?: boolean;
      /** @description Для кастомной прометки: например (Основной веб-сайт, новый сайт, мобилка и т.д.) */
      platform?: string | null;
      /** @description Считать ли дополнительно пакетное каско? */
      withCasco?: boolean;
      /** @description Пролонгация? */
      isProlongation?: boolean;
      /**
       * Format: int32
       * @description Аккаунт под которым выполняется сохранение в СК
       */
      accountPriority?: number | null;
      /** @description Метка контекстной рекламы */
      clid?: string | null;
      /** @description Признак акции яндекс здоровье */
      isHealthPromo?: boolean;
      /** @description Опциональный ключ пролонгации */
      prolongationKey?: string | null;
      vehicleCategory?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.VehicleCategory"];
      /** @description Название бренда */
      brandName?: string | null;
      /** @description Название модели */
      modelName?: string | null;
      transmission?: components["schemas"]["Sravni.ApiGateway.Service.Auto.v1.Models.TransmissionType"];
      /**
       * Format: double
       * @description объем двигателя
       */
      engine?: number;
      previousPolicy?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Agents.PreviousPolicy"];
      /** @description Признак необходимости эмуляции телефонного номера */
      emulatePhone?: boolean;
      /** @description Страхователь он же Собственник */
      insurerIsOwner?: boolean;
      /** @description Диагностическая карта не требует проверки */
      diagnosticCardIsRight?: boolean;
      /** @description Периоды страхования */
      periods?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Agents.InsurancePeriod"][] | null;
      /** @description название бренда */
      brand?: string | null;
      /** @description название модели */
      model?: string | null;
      /** @description Наличие прицепа */
      hasTrailer?: boolean;
      /**
       * Format: int32
       * @description Разрешенная масса ТС
       */
      allowWeight?: number | null;
    };
    /** @description данные прошлого полиса */
    "Sravni.ApiGateway.Service.Osago.v1.Models.Agents.PreviousPolicy": {
      /** @description компания, выдавшая полис */
      company?: string | null;
      /**
       * Format: int32
       * @description id Ск
       */
      companyId?: number;
      /**
       * Format: date-time
       * @description Дата окончания полиса
       */
      policyEndDate?: string | null;
      /** @description Vin по полису */
      vin?: string | null;
      /** @description Номер ТС по полису */
      carNumber?: string | null;
      /** @description Номер Кузова по полису */
      bodyNumber?: string | null;
      /** @description город собственника по полису */
      location?: string | null;
      /**
       * Format: double
       * @description Цена полиса
       */
      price?: number | null;
      /**
       * Format: date-time
       * @description Д/Р страхователя
       */
      insurantBirthDate?: string | null;
      /** @description ФИО страхователя */
      insurantName?: string | null;
      /**
       * Format: double
       * @description Кбм
       */
      kbm?: number | null;
      /**
       * Format: date-time
       * @description Д/Р собственика
       */
      ownerBirthDate?: string | null;
      /** @description ФИО собственика */
      ownerName?: string | null;
      /** @description Серия предыдущего полиса ОСАГО */
      series?: string | null;
      /** @description Номер предыдущего полиса ОСАГО */
      number?: string | null;
    };
    /**
     * @description Модель ответа при получении данных о скоринговой операции в случаях,
     * когда результирующего файла по ней не существует
     */
    "Sravni.ApiGateway.Service.Osago.v1.Models.Agents.ScoringOperationInfoDto": {
      status?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Agents.ScoringOperationStatus"];
      /** Format: uuid */
      guid?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: double */
      durationInMinutes?: number;
      errorMessage?: string | null;
    };
    /**
     * @description Статус скоринговой операции
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Osago.v1.Models.Agents.ScoringOperationStatus": "error" | "pending" | "completed";
    /**
     * @description статус
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Osago.v1.Models.AgentsOrderStatus": "default" | "inProgress" | "failure" | "sold";
    /**
     * @description Действия для фронта
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Osago.v1.Models.AlertAction": "none" | "goToDriverStep" | "disableUpsale" | "policyPriceChange" | "enterRegNumber" | "turnOffDrivers" | "policyEndDateText" | "takePayUrlOnTheNextStep" | "recommendedInsuranceCompany" | "cashbackMobile" | "enterSTS" | "enterRegNumberAndSTS";
    /** @description Модель алерта */
    "Sravni.ApiGateway.Service.Osago.v1.Models.AlertModel": {
      alert?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ColorType"];
      description?: string | null;
      title?: string | null;
      modalTitle?: string | null;
      action?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.AlertAction"];
    };
    /** @description Обертка над результатом который должен имет булевое значение */
    "Sravni.ApiGateway.Service.Osago.v1.Models.BoolResult": {
      /** @description Результат */
      result?: boolean;
      /** @description Ошибка */
      error?: string | null;
    };
    /** @description информации о количестве отделение */
    "Sravni.ApiGateway.Service.Osago.v1.Models.BranchesInfo": {
      /** @description Удаленное урегулирование */
      isRemote?: boolean;
      all?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.InsuranceBranchesCountModel"];
      gettingRegion?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.InsuranceBranchesCountModel"];
    };
    /** @description Результат расчёта ОСАГО через заказ */
    "Sravni.ApiGateway.Service.Osago.v1.Models.CalculateThroughOrderResult": {
      /** @description Расчет завершен */
      isCompleted?: boolean;
      /**
       * Format: int64
       * @description Идентификатор расчета ОСАГО
       */
      searchId?: number;
      /** @description Список результатов */
      osagoCalculateThroughOrderResults?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoCalculateThroughOrderResult"][] | null;
    };
    /** @description Результат расчёта ОСАГО */
    "Sravni.ApiGateway.Service.Osago.v1.Models.CalculationResult": {
      /** @description Расчет завершен */
      isCompleted?: boolean;
      /** @description Резидент РФ */
      isResident?: boolean;
      /** @description Результат расчета осаго */
      propositions?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Proposition"][] | null;
      /**
       * Format: int64
       * @description Id расчета в базе данных
       */
      searchId?: number;
      /** @description Данные Кбм */
      kbm?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.KbmResult"][] | null;
      /** @description канонический id региона покупки */
      gettingRoute?: string | null;
      economyRecommenadtions?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.EconomyRecommenadtions"];
    };
    /** @description Данные о документе на ТС */
    "Sravni.ApiGateway.Service.Osago.v1.Models.CarDocumentInfo": {
      /** @description Серия */
      series?: string | null;
      /** @description Номер */
      number?: string | null;
      /** @description Дата выдачи */
      date?: string | null;
      /**
       * Format: int32
       * @description Тип Документа на ТС
       */
      documentType?: number;
    };
    /** @description результат проверки */
    "Sravni.ApiGateway.Service.Osago.v1.Models.CheckResult": {
      /** @description Id проверки */
      id?: string | null;
      /** @description проверка прошла */
      passed?: boolean;
    };
    /**
     * @description Цвет
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Osago.v1.Models.ColorType": "none" | "green" | "red" | "orange" | "blue" | "gray" | "white" | "yellow" | "dark";
    /** @description Данные для подтверждения оплаты в СК */
    "Sravni.ApiGateway.Service.Osago.v1.Models.ConfirmPaymentQuery": {
      /** @description Id платежа */
      paymentId?: string | null;
    };
    /** @description Результат запроса подтверждения оплаты */
    "Sravni.ApiGateway.Service.Osago.v1.Models.ConfirmPaymentResult": {
      /** @description Описание ошибки, от ск или от нас */
      error?: string | null;
      /** @description результат */
      result?: boolean;
      /** @description номер договора */
      contractNumber?: string | null;
      /** @description id договора */
      contractId?: string | null;
      /** @description id расчета */
      calcId?: string | null;
    };
    /** @description Данные о диагностической карте */
    "Sravni.ApiGateway.Service.Osago.v1.Models.DiagnosticCard": {
      /** @description Наличие ДК */
      ticketExisted?: boolean;
      /** @description Номер */
      number?: string | null;
      /** @description Дата следующего прохождение диагностики */
      dateNextTO?: string | null;
      /** @description Дата окончания дествия ДК */
      ticketDiagnosticDate?: string | null;
    };
    /** @description Результат проверки водителей */
    "Sravni.ApiGateway.Service.Osago.v1.Models.DriverCheckResult": {
      /** @description данные водителя */
      fullName?: string | null;
      /** @description Id проверки */
      id?: string | null;
      /** @description проверка прошла */
      passed?: boolean;
    };
    /** @description Информация о водителе */
    "Sravni.ApiGateway.Service.Osago.v1.Models.DriverInfo": {
      /** @description Дата рождения */
      birthDate?: string | null;
      /** @description Фамилия */
      lastName?: string | null;
      /** @description Отчество */
      middleName?: string | null;
      /** @description Имя */
      firstName?: string | null;
      license?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DriverLicense"];
      passport?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Passport"];
      previousInfo?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PreviousDriverInfo"];
    };
    /** @description данные В/У */
    "Sravni.ApiGateway.Service.Osago.v1.Models.DriverLicense": {
      /** @description Серия В/У */
      series?: string | null;
      /** @description Номер В/У */
      number?: string | null;
      /**
       * Format: date-time
       * @description дата выдачи первых В/У. написанно в В/У или в последнем договоре ОСАГО
       */
      date?: string;
    };
    /** @description Рекомендация о количестве водителей */
    "Sravni.ApiGateway.Service.Osago.v1.Models.DriversCountRecommendation": {
      /** Format: int32 */
      curentDriversCount?: number;
      /** Format: int32 */
      suitableDriversCount?: number;
      text?: string | null;
    };
    /** @description Информация о водителях */
    "Sravni.ApiGateway.Service.Osago.v1.Models.DriversInfo": {
      /**
       * Format: int32
       * @description ограничение по водителям
       */
      driverAmount?: number;
      /** @description список водителей */
      drivers?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DriverInfo"][] | null;
      unnamedDrivers?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.UnnamedDrivers"];
    };
    /** @description Рекомендации по экономии на покупке полиса */
    "Sravni.ApiGateway.Service.Osago.v1.Models.EconomyRecommenadtions": {
      kbmRecommendation?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.KbmRecommendation"];
      ownerRecommendation?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OwnerRecommendation"];
      startDateRecommendation?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.StartDateRecommendation"];
      driversCountRecommendation?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DriversCountRecommendation"];
      ageExperienceRecommendation?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.AgeExperienceRecommendation"];
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.ExtendedOsagoQuery": {
      /**
       * Format: int32
       * @description id бренда ТС
       */
      brandId?: number;
      /**
       * Format: int32
       * @description год выпуска ТС
       */
      year?: number;
      /**
       * Format: int32
       * @description id модели ТС
       */
      modelId?: number;
      /** @description Модификация */
      modification?: string | null;
      /** @description Название кузова + дверность (необязательно) */
      bodyName?: string | null;
      /** @description Резидент РФ? */
      isResident?: boolean;
      /** @description канонический id региона регистрации */
      registrationRoute?: string | null;
      /** @description населенный пункт регистрации (необязательно) */
      registration?: string | null;
      /** @description канонический id региона покупки */
      gettingRoute?: string | null;
      /** @description населенный пункт получения (необязательно) */
      getting?: string | null;
      /**
       * Format: int32
       * @description мощность ТС
       */
      enginePower?: number;
      /** @description запись вида: 1.5 (123.00 л.с.) */
      engineSp?: string | null;
      /**
       * Format: int32
       * @description использование в течение года. сколько месяцев (10 и более = год)
       */
      usageMonthsPerYear?: number;
      /** @description Дата начала договора || расчета кбм */
      policyStartDate?: string | null;
      driversInfo?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DriversInfo"];
      /** @description VIN ТС */
      vin?: string | null;
      /** @description Номер кузова */
      bodyNumber?: string | null;
      /** @description Номер Шасси */
      chassisNumber?: string | null;
      /**
       * Format: uuid
       * @description уникальный id пользователя
       */
      xUserId?: string | null;
      /**
       * Format: int32
       * @description id пользователя в системе сравни.ру
       */
      userId?: number | null;
      owner?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoPerson"];
      insurer?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoPerson"];
      /** @description Номер автомобиля */
      carNumber?: string | null;
      diagnosticCard?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DiagnosticCard"];
      carDocument?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.CarDocumentInfo"];
      save?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveQuery"];
      utm?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoUtmQuery"];
      partner?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoPartnerQuery"];
      promotionQuery?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PromotionQuery"];
      returnUrls?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ReturnUrls"];
      /** @description смс код */
      smsCode?: string | null;
      /** @description токен доступа */
      accessToken?: string | null;
      /** @description приблизительный расчет */
      isApproximation?: boolean;
      /** @description Для кастомной прометки: например (Основной веб-сайт, новый сайт, мобилка и т.д.) */
      platform?: string | null;
      /** @description Считать ли дополнительно пакетное каско? */
      withCasco?: boolean;
      /** @description Пролонгация? */
      isProlongation?: boolean;
      /**
       * Format: int32
       * @description Аккаунт под которым выполняется сохранение в СК
       */
      accountPriority?: number | null;
      /** @description Метка контекстной рекламы */
      clid?: string | null;
      /** @description Признак акции яндекс здоровье */
      isHealthPromo?: boolean;
      /** @description Опциональный ключ пролонгации */
      prolongationKey?: string | null;
      vehicleCategory?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.VehicleCategory"];
      modelName?: string | null;
      brandName?: string | null;
    };
    /** @description Информация по количеству отделений страховой разного типа */
    "Sravni.ApiGateway.Service.Osago.v1.Models.InsuranceBranchesCountModel": {
      /**
       * Format: int32
       * @description Id организации
       */
      organizationId?: number;
      /**
       * Format: int32
       * @description Кол-во точек общее
       */
      totalCount?: number;
      /**
       * Format: int32
       * @description Кол-во точек продаж
       */
      salePointCount?: number;
      /**
       * Format: int32
       * @description Кол-во точек урегулирования убытка
       */
      settlementPointCount?: number;
      /**
       * Format: int32
       * @description Кол-во точек ремонта
       */
      servicePointCount?: number;
    };
    /** @description Страховая - владелец продукта */
    "Sravni.ApiGateway.Service.Osago.v1.Models.InsuranceProvider": {
      /**
       * Format: int32
       * @description Id страховой компании
       */
      id?: number;
      /** @description Код страховой компании */
      code?: string | null;
      /** @description Алиас страховой компании */
      alias?: string | null;
      /** @description Название страховой компании */
      name?: string | null;
      /** @description Название страховой компании */
      fullName?: string | null;
      /** @description Рейтинг РА */
      raRating?: string | null;
      /**
       * Format: float
       * @description Рейтинг РА в числовом представлении
       */
      raRatingNumeric?: number;
      /** @description Описание рейтинга РА компании */
      raRatingDescription?: string | null;
      /**
       * Format: float
       * @description Обобщённый рейтинг Сравни.ру
       */
      rating?: number;
    };
    /** @description Рекомендация по исключению водителя с худшим КБМ */
    "Sravni.ApiGateway.Service.Osago.v1.Models.KbmRecommendation": {
      worstDriverFirstName?: string | null;
      worstDriverLastName?: string | null;
      worstDriverMiddleName?: string | null;
      /** Format: date-time */
      worstDriverBirthDate?: string;
      /** Format: double */
      worstDriverKbm?: number;
      /** Format: double */
      economyMin?: number;
      /** Format: double */
      economyMax?: number;
      text?: string | null;
    };
    /** @description результат проверки кбм */
    "Sravni.ApiGateway.Service.Osago.v1.Models.KbmResult": {
      /** @description результат есть? */
      hasResult?: boolean;
      kbm?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.KbmResult+KbmInfo"];
      person?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DriverInfo"];
      /**
       * Format: double
       * @description Минимальная стоимость страховки для этого КБМ
       */
      minimumPrice?: number;
      /** @description Ошибка */
      error?: string | null;
    };
    /** @description данные кбм */
    "Sravni.ApiGateway.Service.Osago.v1.Models.KbmResult+KbmInfo": {
      /** @description Класс */
      kbmClass?: string | null;
      /**
       * Format: double
       * @description Коэффициент
       */
      kbmFactor?: number;
      /** @description Последний известный номер договора */
      lastContractNumber?: string | null;
      /** @description Последняя известная серия договора */
      lastContractSeria?: string | null;
      /** @description Последняя известная страховая */
      lastInsurerName?: string | null;
      /** @description количество страховых случаев в прошлом году */
      lossAmount?: string | null;
      /** @description Дата начала действия прошлого полиса */
      startDate?: string | null;
      /** @description Дата окончания действия прошлого полиса */
      endDate?: string | null;
      /** @description последний известный класс */
      lastKbmClass?: string | null;
      /**
       * Format: double
       * @description последний известный коэффициент
       */
      lastKbmFactor?: number;
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.MappingError": {
      /**
       * Format: int32
       * @description id правила
       */
      errorRuleId?: number;
      /** @description мап на онлайн ошибку */
      online?: string | null;
      /** @description мап на офлайн ошибку */
      offline?: string | null;
      /** @description мап на pbi */
      powerBI?: string | null;
      /**
       * Format: int32
       * @description id ошибки
       */
      sravniErrorId?: number;
    };
    /** @description результат ответа на запрос мин и макс цены в регине */
    "Sravni.ApiGateway.Service.Osago.v1.Models.MinMaxPricesResult": {
      /**
       * Format: double
       * @description мин
       */
      minPrice?: number;
      /**
       * Format: double
       * @description макс
       */
      maxPrice?: number;
    };
    /** @description заказ и его статус */
    "Sravni.ApiGateway.Service.Osago.v1.Models.OrderStatus": {
      /**
       * Format: int32
       * @description идентификатор заказа
       */
      orderId?: number;
      status?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.AgentsOrderStatus"];
    };
    /** @description модель для получения короткой информации и ссылки на полис */
    "Sravni.ApiGateway.Service.Osago.v1.Models.OrderTehInfoResult": {
      /** @description Акцептован? */
      isAccepted?: boolean;
      /** @description Аннулирован? */
      isCanceled?: boolean;
      /** @description url на архиф */
      policyLink?: string | null;
      /** @description url на бланк полиса */
      policyBlankLink?: string | null;
      /** @description url на оплату или фрейм */
      paymentUrl?: string | null;
      /** @description Id договора в страховой */
      contractId?: string | null;
      /** @description Номер договора в страховой */
      contractNumber?: string | null;
      /**
       * Format: date-time
       * @description Дата создания заказа
       */
      date?: string;
      /**
       * Format: date-time
       * @description Дата обновления заказа
       */
      dateUpdate?: string;
      /**
       * Format: double
       * @description Цена полиса
       */
      price?: number;
      /** @description страхователь */
      name?: string | null;
      /** @description Доп параметр 3 */
      affSub3?: string | null;
      /** @description Доп параметр 4 */
      affSub4?: string | null;
      /** @description Доп параметр 5 */
      affSub5?: string | null;
    };
    /** @description Результат попытки расчета через заказ */
    "Sravni.ApiGateway.Service.Osago.v1.Models.OsagoCalculateThroughOrderResult": {
      /**
       * Format: int32
       * @description Идентификатор результата сохранения
       */
      id?: number;
      /**
       * Format: int32
       * @description Идентификатор расчета через заказ
       */
      calculateThroughOrderId?: number;
      /**
       * Format: double
       * @description Стоимость
       */
      price?: number;
      /**
       * Format: int32
       * @description Идентификатор продукта ОСАГО
       */
      osagoId?: number;
      /**
       * Format: int32
       * @description Идентификатор страховой компании
       */
      companyId?: number;
      /** @description Ссылка на оплату */
      paymentUrl?: string | null;
      /** @description Hash доступа к заказу */
      hash?: string | null;
      provider?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.InsuranceProvider"];
      coefficients?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoCoeffs"];
      /** @description Пролонгируемый полис с точки зрения СК */
      withCompanyProlongation?: boolean;
      partnerProfit?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PartnerProfit"];
      /** @description Признак пула */
      isPool?: boolean;
    };
    /** @description Коэффициенты для расчета ОСАГО от СК */
    "Sravni.ApiGateway.Service.Osago.v1.Models.OsagoCoeffs": {
      /**
       * Format: double
       * @description Базовая ставка
       */
      tb?: number;
      /**
       * Format: double
       * @description Территориальный коэффициент
       */
      kt?: number;
      /**
       * Format: double
       * @description Коэффициент бонус-малус
       */
      kbm?: number;
      /**
       * Format: double
       * @description Коэффициент возраста и стажа
       */
      kvs?: number;
      /**
       * Format: double
       * @description Коэффициент КС периода использования ТС
       */
      ks?: number;
      /**
       * Format: double
       * @description Коэффициент КП - срок страхования
       */
      kp?: number;
      /**
       * Format: double
       * @description Коэффициент мощности двигателя
       */
      km?: number;
      /**
       * Format: double
       * @description Коэффициент нарушений
       */
      kn?: number;
      /**
       * Format: double
       * @description Коэффициент КО
       */
      ko?: number;
      /**
       * Format: double
       * @description Коэффициент прицепа
       */
      kpr?: number;
    };
    /** @description Партнерский блок */
    "Sravni.ApiGateway.Service.Osago.v1.Models.OsagoPartnerQuery": {
      /** @description канал */
      medium?: string | null;
      /** @description источник */
      source?: string | null;
      /** @description компания */
      campaign?: string | null;
      /** @description Контент. */
      content?: string | null;
      /** @description Поисковый запрос. */
      term?: string | null;
      /** @description google id */
      uaClientId?: string | null;
      /** @description доп метка */
      subId?: string | null;
      /**
       * Format: int32
       * @description партнерские данные (Id аффилиата по hasoffers)
       */
      affId?: number | null;
      /** @description партнерские данные (Id/externalId виджета по админке партнерки) */
      affSub1?: string | null;
      /** @description партнерские данные */
      affSub2?: string | null;
      /** @description партнерские данные */
      affSub3?: string | null;
      /** @description партнерские данные */
      affSub4?: string | null;
      /** @description партнерские данные */
      affSub5?: string | null;
      /** @description партнерские данные (Id площадки) */
      sourceId?: string | null;
      /** @description партнерские данные (Id клика перехода на сравни.ру с паретнерской площадки) */
      transactionId?: string | null;
      /**
       * Format: int32
       * @description партнерские данные (Id оффера по hasoffers)
       */
      offerId?: number | null;
      /** @description Регион агента (по КЛАДР) */
      agentRegion?: string | null;
      /** @description Id агента в системе Альфа страхования */
      alfaUserId?: string | null;
      /** @description Id агента в системе Ренесанс страхования */
      renessansUserId?: string | null;
    };
    /** @description роль Собственник или Страхователь ТС */
    "Sravni.ApiGateway.Service.Osago.v1.Models.OsagoPerson": {
      /** @description Фамилия */
      lastName?: string | null;
      /** @description Имя */
      firstName?: string | null;
      /** @description Отчество */
      middleName?: string | null;
      passport?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Passport"];
      /** @description Дата рождения */
      birthDate?: string | null;
      /** @description Телефон */
      phone?: string | null;
      /** @description e-mail */
      email?: string | null;
      /** @description Адрес регистрации */
      registrationAddress?: string | null;
    };
    /** @description запрос на расчет осаго */
    "Sravni.ApiGateway.Service.Osago.v1.Models.OsagoQuery": {
      /**
       * Format: int32
       * @description id бренда ТС
       */
      brandId?: number;
      /**
       * Format: int32
       * @description год выпуска ТС
       */
      year?: number;
      /**
       * Format: int32
       * @description id модели ТС
       */
      modelId?: number;
      /** @description Модификация */
      modification?: string | null;
      /** @description Название кузова + дверность (необязательно) */
      bodyName?: string | null;
      /** @description Резидент РФ? */
      isResident?: boolean;
      /** @description канонический id региона регистрации */
      registrationRoute?: string | null;
      /** @description населенный пункт регистрации (необязательно) */
      registration?: string | null;
      /** @description канонический id региона покупки */
      gettingRoute?: string | null;
      /** @description населенный пункт получения (необязательно) */
      getting?: string | null;
      /**
       * Format: int32
       * @description мощность ТС
       */
      enginePower?: number;
      /** @description запись вида: 1.5 (123.00 л.с.) */
      engineSp?: string | null;
      /**
       * Format: int32
       * @description использование в течение года. сколько месяцев (10 и более = год)
       */
      usageMonthsPerYear?: number;
      /** @description Дата начала договора || расчета кбм */
      policyStartDate?: string | null;
      driversInfo?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DriversInfo"];
      /** @description VIN ТС */
      vin?: string | null;
      /** @description Номер кузова */
      bodyNumber?: string | null;
      /** @description Номер Шасси */
      chassisNumber?: string | null;
      /**
       * Format: uuid
       * @description уникальный id пользователя
       */
      xUserId?: string | null;
      /**
       * Format: int32
       * @description id пользователя в системе сравни.ру
       */
      userId?: number | null;
      owner?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoPerson"];
      insurer?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoPerson"];
      /** @description Номер автомобиля */
      carNumber?: string | null;
      diagnosticCard?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DiagnosticCard"];
      carDocument?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.CarDocumentInfo"];
      save?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveQuery"];
      utm?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoUtmQuery"];
      partner?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoPartnerQuery"];
      promotionQuery?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PromotionQuery"];
      returnUrls?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ReturnUrls"];
      /** @description смс код */
      smsCode?: string | null;
      /** @description токен доступа */
      accessToken?: string | null;
      /** @description приблизительный расчет */
      isApproximation?: boolean;
      /** @description Для кастомной прометки: например (Основной веб-сайт, новый сайт, мобилка и т.д.) */
      platform?: string | null;
      /** @description Считать ли дополнительно пакетное каско? */
      withCasco?: boolean;
      /** @description Пролонгация? */
      isProlongation?: boolean;
      /**
       * Format: int32
       * @description Аккаунт под которым выполняется сохранение в СК
       */
      accountPriority?: number | null;
      /** @description Метка контекстной рекламы */
      clid?: string | null;
      /** @description Признак акции яндекс здоровье */
      isHealthPromo?: boolean;
      /** @description Опциональный ключ пролонгации */
      prolongationKey?: string | null;
      vehicleCategory?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.VehicleCategory"];
      /** @description Название бренда */
      brandName?: string | null;
      /** @description Название модели */
      modelName?: string | null;
    };
    /** @description Результат проверки сохранения конкретного продукта */
    "Sravni.ApiGateway.Service.Osago.v1.Models.OsagoTrySaveResult": {
      /**
       * Format: int32
       * @description Идентификатор результата сохранения
       */
      id?: number;
      /**
       * Format: int32
       * @description Идентификатор проверки
       */
      trySaveId?: number;
      /**
       * Format: double
       * @description Стоимость
       */
      price?: number;
      /**
       * Format: int32
       * @description Продукт ОСАГО
       */
      osagoId?: number;
      /**
       * Format: int32
       * @description Страховая компания
       */
      companyId?: number;
      /**
       * Format: int32
       * @description Номер учетки под которой был оформлен
       */
      accountPriority?: number;
    };
    /** @description Utm метки */
    "Sravni.ApiGateway.Service.Osago.v1.Models.OsagoUtmQuery": {
      /** @description канал */
      medium?: string | null;
      /** @description источник */
      source?: string | null;
      /** @description компания */
      campaign?: string | null;
      /** @description Контент. */
      content?: string | null;
      /** @description Поисковый запрос. */
      term?: string | null;
      /** @description google id */
      uaClientId?: string | null;
    };
    /** @description Рекомендация о том, что владелец и страхователь должен быть одним лицом */
    "Sravni.ApiGateway.Service.Osago.v1.Models.OwnerRecommendation": {
      ownerName?: string | null;
      insurerName?: string | null;
      text?: string | null;
    };
    /** @description заказы */
    "Sravni.ApiGateway.Service.Osago.v1.Models.PartnerOsagoOrderResult": {
      /**
       * Format: int32
       * @description Номер договора
       */
      order_number?: number;
      /**
       * Format: double
       * @description Стоимость ОСАГО
       */
      price?: number;
      /**
       * Format: double
       * @description Профит
       */
      profit?: number;
      /** @description Валюта */
      currency?: string | null;
      /** @description Описание */
      description?: string | null;
      sub_id?: string | null;
      /** @description Доп параметр 3 */
      aff_sub3?: string | null;
      /** @description Доп параметр 4 */
      aff_sub4?: string | null;
      /** @description Доп параметр 5 */
      aff_sub5?: string | null;
      /** @description Статус */
      status?: string | null;
      /**
       * Format: date-time
       * @description Дата обновления договора
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description Дата создания договора
       */
      created_at?: string;
      /** @description Хеш заказа */
      hash?: string | null;
      /** @description СК */
      companyName?: string | null;
    };
    /** @description Доход партнера */
    "Sravni.ApiGateway.Service.Osago.v1.Models.PartnerProfit": {
      /**
       * Format: double
       * @description Доход в % общий
       */
      percent?: number;
      /**
       * Format: double
       * @description Доход в рублях общий
       */
      profit?: number;
      /**
       * Format: double
       * @description промо. % вычисленный
       */
      promoPercent?: number;
      /**
       * Format: double
       * @description пролонгация. % вычисленный
       */
      prolongationPercent?: number;
      /**
       * Format: double
       * @description Доход в % базовый
       */
      basePercent?: number;
    };
    /** @description данные паспорта */
    "Sravni.ApiGateway.Service.Osago.v1.Models.Passport": {
      /** @description серия паспорта */
      series?: string | null;
      /** @description номер паспорта */
      number?: string | null;
      /** @description Кем выдан паспорт */
      issuedBy?: string | null;
      /** @description Дата выдачи паспорта */
      issueDate?: string | null;
    };
    /** @description Результат получения платежной ссылки */
    "Sravni.ApiGateway.Service.Osago.v1.Models.PaymentUrlResult": {
      /** @description Платежная ссылка */
      paymentUrl?: string | null;
      /**
       * Format: int32
       * @description Результат операции
       */
      getResultType?: number;
    };
    /** @description Старые данные о ФИО и ВУ */
    "Sravni.ApiGateway.Service.Osago.v1.Models.PreviousDriverInfo": {
      /** @description Фамилия */
      lastName?: string | null;
      /** @description Отчество */
      middleName?: string | null;
      /** @description Имя */
      firstName?: string | null;
      license?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DriverLicense"];
    };
    /** @description Продукт осаго */
    "Sravni.ApiGateway.Service.Osago.v1.Models.Product": {
      /** @description Возможен переход */
      canRedirect?: boolean;
      /** @description Возможна продажа */
      canSell?: boolean;
      provider?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.InsuranceProvider"];
      /**
       * Format: int32
       * @description id
       */
      id?: number;
      /**
       * Format: int32
       * @description id системе hasoffer
       */
      hasofferId?: number;
      /** @description куда редиректим при переходе */
      externalUrl?: string | null;
      /**
       * Format: int64
       * @description документ для оформление полиса ОСАГО
       */
      carDocumentType?: number;
      /** @description Прогноз */
      forecast?: string | null;
      /** Format: int32 */
      order?: number;
      /** @description Преимущества */
      osagoAdvantages?: string[] | null;
    };
    /** @description Модель для запроса пролонгации ОСАГО */
    "Sravni.ApiGateway.Service.Osago.v1.Models.Prolongation.OsagoProlongationQuery": {
      partner?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoUtmQuery"];
      insurer?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoPerson"];
      /** @description номер договора в ск */
      policyNumber?: string | null;
      /** @description Ключ для запуска офорления Е-ОСАГО в РСА */
      createRsaPolicy?: boolean;
      /** @description серия договора в ск */
      policySeries?: string | null;
      /**
       * Format: int32
       * @description id страховой компании для заказа
       */
      companyId?: number;
      /** @description Для кастомной прометки: например (Основной веб-сайт, новый сайт, мобилка и т.д.) */
      platform?: string | null;
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.ProlongationEventDataDto": {
      /** @description Хэш заказа прошлого года */
      orderHash?: string | null;
      utm?: string | null;
      communicationType?: string | null;
      campaignName?: string | null;
      /** Format: date-time */
      policyStartDate?: string | null;
    };
    /** @description Промакция */
    "Sravni.ApiGateway.Service.Osago.v1.Models.PromoProgramDto": {
      /** @description Код */
      code?: string | null;
      /** @description Описание */
      description?: string | null;
      /** @description Ссылка на лого акции */
      logoLink?: string | null;
      /** @description Ссылка на правила акции */
      ruleLink?: string | null;
      /** @description Признак того что акция общая и действует на все предложения */
      isGeneral?: boolean;
    };
    /** @description Promotion метки */
    "Sravni.ApiGateway.Service.Osago.v1.Models.PromotionQuery": {
      /** @description источник */
      source?: string | null;
      /** @description компания */
      campaign?: string | null;
      category?: string | null;
      sub1?: string | null;
      sub2?: string | null;
    };
    /** @description Рассчитанное предложение ОСАГО */
    "Sravni.ApiGateway.Service.Osago.v1.Models.Proposition": {
      product?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Product"];
      /**
       * Format: double
       * @description Цена
       */
      price?: number;
      /** @description Есть КБМ */
      hasKbm?: boolean;
      /** @description Класс КБМ */
      kbmClass?: string | null;
      /** @description Сообщение об ошибке */
      message?: string | null;
      /**
       * Format: double
       * @description Коэффициент КБМ
       */
      kbmFactor?: number;
      branches?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BranchesInfo"];
      /**
       * Format: int32
       * @description Номер учетки под которой был заказ
       */
      accountPriority?: number;
      /** @description Пролонгируемый полис */
      isProlongation?: boolean;
      /**
       * Format: int32
       * @description франшиза в днях. на оформление
       */
      franchise?: number;
      /** @description Список промо-программ, удовлетворяющих данному предложению */
      promoPrograms?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PromoProgramDto"][] | null;
      /** @description Признак акции яндекс здоровье */
      isHealthPromo?: boolean;
      /** @description СК вернула что этот полис считается пролонгацией */
      withCompanyProlongation?: boolean;
      /** @description Уточнение источника пролонгации */
      prolongationAttr?: string | null;
      /** @description Прошли в сегмент по зеленому коридору */
      isGreenCorridor?: boolean;
      profit?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PartnerProfit"];
      /** @description Апсейлы с заказу */
      upsaleResults?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.UpsaleResult"][] | null;
    };
    /** @description Информация по страховой с отделениями */
    "Sravni.ApiGateway.Service.Osago.v1.Models.ProviderInfo": {
      provider?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.InsuranceProvider"];
      reviewInfo?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ReviewInfo"];
      branches?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.BranchesInfo"];
      /** @description Лицензия осаго */
      osagoLicense?: string | null;
    };
    /** @description запрос на выставление статусов заказам для агентов */
    "Sravni.ApiGateway.Service.Osago.v1.Models.QueryAgentOrderStatus": {
      /** @description зашифрованный идентификатор брокера */
      brokerId?: string | null;
      /** @description список заказов и их статусов */
      ordersStatuses?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OrderStatus"][] | null;
    };
    /** @description Ссылка для редиректа */
    "Sravni.ApiGateway.Service.Osago.v1.Models.RedirectLink": {
      /**
       * @description Ссылка
       * Если есть возможность оплатить, то на оплату
       * Иначе - на выдачу
       */
      url?: string | null;
    };
    /** @description Ссылки для возврата */
    "Sravni.ApiGateway.Service.Osago.v1.Models.ReturnUrls": {
      /** @description страница успеха */
      succesUrl?: string | null;
      /** @description страница не успеха */
      failureUrl?: string | null;
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.ReviewInfo": {
      /**
       * Format: double
       * @description Средняя клиентская оценка.
       */
      averageScore?: number;
      /**
       * Format: int32
       * @description Рейтинг клиента по всем продуктам
       */
      overallClientRating?: number;
      /**
       * Format: int32
       * @description Общее кол-во рецензий
       */
      count?: number;
      /**
       * Format: int32
       * @description Доступное кол-во рецензий
       */
      validCount?: number;
      /** @description Ссылка на страницу рецензий */
      url?: string | null;
    };
    /** @description Команда на сохранение */
    "Sravni.ApiGateway.Service.Osago.v1.Models.SaveQuery": {
      /**
       * Format: int32
       * @description Id продукта
       */
      productId?: number;
      /**
       * Format: int64
       * @description id расчета в базе данных
       */
      searchId?: number;
      /** @description заказ с проброса */
      isRoute?: boolean;
      /**
       * Format: int32
       * @description с какой компании был проброс
       */
      originalCompanyId?: number | null;
    };
    /** @description результат сохранения query */
    "Sravni.ApiGateway.Service.Osago.v1.Models.SaveQueryResult": {
      /**
       * Format: int64
       * @description Id
       */
      id?: number;
      /** @description Hash доступа */
      hash?: string | null;
    };
    /** @description результат сохранения query с минимальной ценой */
    "Sravni.ApiGateway.Service.Osago.v1.Models.SaveQueryWithPriceResult": {
      /**
       * Format: int64
       * @description Id созданной Query
       */
      id?: number;
      /** @description Hash доступа */
      hash?: string | null;
      /**
       * Format: double
       * @description Цена предложения
       */
      price?: number;
      /** @description СК предложения */
      companyName?: string | null;
    };
    /** @description интерфес результата сохранения осаго */
    "Sravni.ApiGateway.Service.Osago.v1.Models.SaveResult": {
      /** @description Id расчета в страховой */
      calcId?: string | null;
      vehicleCheckResult?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.VehicleCheckResult"];
      insurerCheckResult?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.CheckResult"];
      ownerCheckResult?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.CheckResult"];
      /** @description результат проверки водителей в страховой */
      driversCheckResults?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.DriverCheckResult"][] | null;
      /** @description Id договора в страховой */
      contractId?: string | null;
      /** @description Номер договора в страховой */
      contractNumber?: string | null;
      /**
       * Format: double
       * @description Цена страховки
       */
      price?: number;
      /** @description url на оплату или фрейм */
      url?: string | null;
      /**
       * Format: int32
       * @description статус сохранения в страховой
       */
      saveResultType?: number;
      /** @description Рекомендация пользователю */
      recomendationToUser?: string | null;
      provider?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.InsuranceProvider"];
      coefficients?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoCoeffs"];
      /**
       * Format: int32
       * @description Номер учетки под которой был оформлен
       */
      accountPriority?: number;
      /** @description требуется смс подтверждение от страховой компании */
      smsRequired?: boolean;
      /** @description hash заказа */
      hash?: string | null;
      profit?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.PartnerProfit"];
      /** @description Ошибки для пользователя */
      errors?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.MappingError"][] | null;
      /** @description Коментарии к заказу от страховой */
      originalComment?: string | null;
      /** @description Признак пула */
      isPool?: boolean;
      /** @description Апсейлы с заказу */
      upsaleResults?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.UpsaleResult"][] | null;
      /** @description Алерты на фронт */
      alerts?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.AlertModel"][] | null;
    };
    /** @description интерфес результата сохранения осаго вместе с пробросом */
    "Sravni.ApiGateway.Service.Osago.v1.Models.SaveWithTrySaveResult": {
      saveResult?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.SaveResult"];
      /**
       * Format: int64
       * @description ИД расчета
       */
      searchId?: number | null;
      /** @description результат проброса */
      propositions?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Proposition"][] | null;
      /** @description Признак  завершения расчета */
      isCompleted?: boolean;
      /** @description Route региона регистрации */
      registrationRoute?: string | null;
      /** @description цена изменилась в момент заказа */
      isPriceChanged?: boolean;
      /**
       * Format: double
       * @description Цена расчета
       */
      searchPrice?: number | null;
      /** @description Заказ завершен */
      saveResultCompleted?: boolean;
    };
    /** @description Запрос на отправку ссылки на расчет по электронной почте */
    "Sravni.ApiGateway.Service.Osago.v1.Models.SendCalcLinkRequest": {
      /**
       * Format: int64
       * @description Id расчета ОСАГО
       */
      calculationId?: number;
      /** @description Электронная почта, на которую следует отправить письмо со ссылкой */
      email?: string | null;
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CalculateKbmResponse": {
      /** @description Идентификатор расчета стоимости полиса */
      policyCalculationId?: string | null;
      /** @description Cписок результатов расчета */
      drivers?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.DriverKbmInfo"][] | null;
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CalculatePolicyCostResponse": {
      /** @description Идентификатор расчета стоимости полиса */
      policyCalculationId?: string | null;
      /** @description Признак того, что оформление полиса возможно только в офисе */
      offlineOnly?: boolean;
      /** @description Статус расчета стоимости полиса */
      status?: boolean;
      /**
       * Format: double
       * @description Рассчитанная стоимость полиса
       */
      cost?: number | null;
      /**
       * Format: double
       * @description Рассчитанный КБМ по полису
       */
      policyKbmValue?: number | null;
      /** @description Описание ошибки при	невозможности расчета стоимости полиса */
      error?: string | null;
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CheckVehicleServiceResponse": {
      /** @description Идентификатор расчета стоимости полиса */
      policyCalculationId?: string | null;
      /** @description Признак существования действующего талона ТО */
      ticketExists?: boolean;
      /** @description Дата следующего прохождения ТО */
      nextVehicleServiceDate?: string | null;
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CreatePolicyResponse": {
      /** @description Идентификатор расчета стоимости полиса */
      policyCalculationId?: string | null;
      /** @description Номер полиса */
      policyNumber?: string | null;
      /**
       * Format: double
       * @description Рассчитанная стоимость полиса
       */
      cost?: number | null;
      /** @description Статус расчета стоимости полиса */
      status?: boolean;
      /** @description Признак того, что оформление полиса возможно только в офисе */
      offlineOnly?: boolean;
      /** @description Описание ошибки при	невозможности расчета стоимости полиса */
      error?: string | null;
      policyValidation?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CreatePolicyValidation"];
      policyRsaValidation?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CreatePolicyValidation"];
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CreatePolicyValidation": {
      status?: boolean;
      errorList?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.ValidationError"][] | null;
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.DriverKbmInfo": {
      /** @description Уникальный идентификатор персональных данных, передаваемый в запросе CalculateKbm */
      personDocumentId?: string | null;
      /**
       * Format: double
       * @description Значение КБМ для водителя
       */
      kbmValue?: number;
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.PolicyValidation": {
      status?: boolean;
      errorList?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.ValidationError"][] | null;
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.PreparePolicyResponse": {
      /** @description Идентификатор расчета */
      policyCalculationId?: string | null;
      /** @description Номер полиса */
      policyNumber?: string | null;
      /**
       * Format: double
       * @description Рассчитанная стоимость полиса
       */
      cost?: number | null;
      /** @description Статус расчета */
      status?: boolean;
      /** @description Признак того, что оформление полиса возможно только в офисе */
      offlineOnly?: boolean;
      /** @description Описание ошибки при	невозможности расчета стоимости полиса */
      error?: string | null;
      policyValidation?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.PolicyValidation"];
      policyRsaValidation?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.PolicyValidation"];
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SavePolicyResponse": {
      /** @description Идентификатор расчета */
      policyCalculationId?: string | null;
      /** @description Номер полиса */
      policyNumber?: string | null;
      /**
       * Format: double
       * @description Рассчитанная стоимость полиса
       */
      cost?: number | null;
      /** @description Статус расчета */
      status?: boolean;
      /** @description Признак того, что оформление полиса возможно только в офисе */
      offlineOnly?: boolean;
      /** @description Описание ошибки при	невозможности расчета стоимости полиса */
      error?: string | null;
      policyValidation?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.PolicyValidation"];
      policyRsaValidation?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.PolicyValidation"];
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CalculateKbmResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      /** @description Статус выполнения запроса, допустимые значения:	success, error */
      status?: string | null;
      /** @description Описание ошибки */
      error?: string | null;
      /**
       * Format: date-time
       * @description Дата запроса в формате yyyy-MMdd'T'hh:mm:ss.SSSZ
       */
      response_dt?: string;
      /** @description Идентификатор запроса (уникальный в рамках всего взаимодействия) */
      request_id?: string | null;
      result?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CalculateKbmResponse"];
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CalculatePolicyCostResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      /** @description Статус выполнения запроса, допустимые значения:	success, error */
      status?: string | null;
      /** @description Описание ошибки */
      error?: string | null;
      /**
       * Format: date-time
       * @description Дата запроса в формате yyyy-MMdd'T'hh:mm:ss.SSSZ
       */
      response_dt?: string;
      /** @description Идентификатор запроса (уникальный в рамках всего взаимодействия) */
      request_id?: string | null;
      result?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CalculatePolicyCostResponse"];
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CheckVehicleServiceResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      /** @description Статус выполнения запроса, допустимые значения:	success, error */
      status?: string | null;
      /** @description Описание ошибки */
      error?: string | null;
      /**
       * Format: date-time
       * @description Дата запроса в формате yyyy-MMdd'T'hh:mm:ss.SSSZ
       */
      response_dt?: string;
      /** @description Идентификатор запроса (уникальный в рамках всего взаимодействия) */
      request_id?: string | null;
      result?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CheckVehicleServiceResponse"];
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CreatePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      /** @description Статус выполнения запроса, допустимые значения:	success, error */
      status?: string | null;
      /** @description Описание ошибки */
      error?: string | null;
      /**
       * Format: date-time
       * @description Дата запроса в формате yyyy-MMdd'T'hh:mm:ss.SSSZ
       */
      response_dt?: string;
      /** @description Идентификатор запроса (уникальный в рамках всего взаимодействия) */
      request_id?: string | null;
      result?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.CreatePolicyResponse"];
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.PreparePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      /** @description Статус выполнения запроса, допустимые значения:	success, error */
      status?: string | null;
      /** @description Описание ошибки */
      error?: string | null;
      /**
       * Format: date-time
       * @description Дата запроса в формате yyyy-MMdd'T'hh:mm:ss.SSSZ
       */
      response_dt?: string;
      /** @description Идентификатор запроса (уникальный в рамках всего взаимодействия) */
      request_id?: string | null;
      result?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.PreparePolicyResponse"];
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SovcomWrappedResponse`1[[Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SavePolicyResponse, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      /** @description Статус выполнения запроса, допустимые значения:	success, error */
      status?: string | null;
      /** @description Описание ошибки */
      error?: string | null;
      /**
       * Format: date-time
       * @description Дата запроса в формате yyyy-MMdd'T'hh:mm:ss.SSSZ
       */
      response_dt?: string;
      /** @description Идентификатор запроса (уникальный в рамках всего взаимодействия) */
      request_id?: string | null;
      result?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.SavePolicyResponse"];
    };
    "Sravni.ApiGateway.Service.Osago.v1.Models.Sovcom.ValidationError": {
      errorCode?: string | null;
      description?: string | null;
    };
    /** @description Рекомендация о ДНД полиса */
    "Sravni.ApiGateway.Service.Osago.v1.Models.StartDateRecommendation": {
      /** Format: date-time */
      currentStartDate?: string;
      /** Format: date-time */
      recommendedStartDate?: string;
      /** Format: date-time */
      suitableStartDateMin?: string;
      /** Format: date-time */
      suitableStartDateMax?: string;
      text?: string | null;
    };
    /** @description Результат проверки сохранения договора ОСАГО в компаниях отличных от компании в заказе */
    "Sravni.ApiGateway.Service.Osago.v1.Models.TrySaveResult": {
      /** @description Проеверка завершена */
      isCompleted?: boolean;
      /**
       * Format: int64
       * @description Идентификатор расчета ОСАГО
       */
      searchId?: number;
      /** @description Результаты проверки */
      osagoTrySaveResults?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoTrySaveResult"][] | null;
      /** @description Предложения ОСАГО */
      propositions?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.Proposition"][] | null;
    };
    /** @description данные для неименованного списка водителей/предварительного расчтеа */
    "Sravni.ApiGateway.Service.Osago.v1.Models.UnnamedDrivers": {
      /**
       * Format: int32
       * @description интервал возраста для расчета осаго
       */
      age?: number;
      /**
       * Format: int32
       * @description интервал стажа для расчета осаго
       */
      experience?: number;
    };
    /** @description Результат сохранения апсейла к заказу */
    "Sravni.ApiGateway.Service.Osago.v1.Models.UpsaleResult": {
      /** Format: int32 */
      productId?: number;
      productName?: string | null;
      productDescription?: string | null;
      /** Format: double */
      price?: number;
      externalId?: string | null;
      contractNumber?: string | null;
    };
    /** @description Event */
    "Sravni.ApiGateway.Service.Osago.v1.Models.UserEventDto": {
      /** @description События, возникающие при пользовательских действиях на фронте */
      eventName?: string | null;
      /**
       * Format: int64
       * @description ИД расчета
       */
      searchId?: number | null;
      /** @description Хэш заказа */
      orderHash?: string | null;
      query?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.OsagoQuery"];
      prolongationData?: components["schemas"]["Sravni.ApiGateway.Service.Osago.v1.Models.ProlongationEventDataDto"];
    };
    /**
     * @description Категория ВУ
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Osago.v1.Models.VehicleCategory": "b" | "c" | "a";
    /** @description результат проверки ТС */
    "Sravni.ApiGateway.Service.Osago.v1.Models.VehicleCheckResult": {
      /** @description поля не прошедшие проверку */
      failedFields?: string | null;
      /** @description Id проверки */
      id?: string | null;
      /** @description проверка прошла */
      passed?: boolean;
    };
    /** @description Запрос на обновление заявки по CarPrice */
    "Sravni.ApiGateway.Service.RelatedCar.Models.CarPriceUpdateRequest": {
      code?: string | null;
      status?: string | null;
      /** Format: double */
      final_price?: number | null;
    };
    /** @description заказы */
    "Sravni.ApiGateway.Service.Report.v1.Models.PartnerOrdersResult": {
      /** @description тип */
      order_type?: string | null;
      /**
       * Format: int32
       * @description Номер договора
       */
      order_number?: number;
      /**
       * Format: double
       * @description Стоимость ОСАГО
       */
      price?: number;
      /**
       * Format: double
       * @description Профит
       */
      profit?: number;
      /** @description Валюта */
      currency?: string | null;
      /** @description Описание */
      description?: string | null;
      sub_id?: string | null;
      /** @description Статус */
      status?: string | null;
      /**
       * Format: date-time
       * @description Дата обновления договора
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description Дата создания договора
       */
      created_at?: string;
      /** @description Хеш заказа */
      hash?: string | null;
      /** @description СК */
      companyName?: string | null;
    };
    /** @description Элемент отчёта */
    "Sravni.ApiGateway.Service.Report.v1.Models.ReportItem": {
      reportSourceType?: components["schemas"]["Sravni.ApiGateway.Service.Report.v1.Models.ReportSourceType"];
      result?: components["schemas"]["Sravni.ApiGateway.Service.Models.AnyResult`1[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
    };
    /**
     * @description Тип источника для отчета
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Report.v1.Models.ReportSourceType": "none" | "web" | "agents" | "partners" | "cpc" | "api";
    "Sravni.ApiGateway.Service.Reviews.v1.Models.CommentModel": {
      /**
       * Format: int32
       * @description Id
       */
      id?: number;
      /**
       * Format: date-time
       * @description Дата создания
       */
      created?: string;
      /**
       * Format: int32
       * @description Id автора
       */
      authorId?: number | null;
      /** @description Имя автора */
      authorName?: string | null;
      /** @description Признак того, что комментарий от компании */
      isCompanyResponse?: boolean;
      /**
       * Format: int32
       * @description Id родителя
       */
      parentId?: number | null;
      /** @description Текст */
      text?: string | null;
      /** @description Коллекция коментариев */
      comments?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.CommentModel"][] | null;
    };
    "Sravni.ApiGateway.Service.Reviews.v1.Models.FeatureModel": {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      alias?: string | null;
    };
    /** @description Модель локации */
    "Sravni.ApiGateway.Service.Reviews.v1.Models.LocationModel": {
      /**
       * Format: int32
       * @description Id
       */
      id?: number;
      /** @description Alias */
      alias?: string | null;
      /** @description Наименование */
      name?: string | null;
      /**
       * Format: double
       * @description Широта
       */
      latitude?: number | null;
      /**
       * Format: double
       * @description Долгота
       */
      longitude?: number | null;
    };
    /** @enum {string} */
    "Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewActivityEventType": "reviewEdited" | "reviewChecked" | "commentAdded" | "commentEdited" | "ratingAccepted" | "ratingChanged" | "ratingRejected" | "problemSolved" | "problemSolutionReset";
    "Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewModel": {
      /**
       * Format: date-time
       * @description Дата создания
       */
      date?: string | null;
      /**
       * Format: int32
       * @description Оценка
       */
      rate?: number | null;
      rateStatus?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewRateStatus"];
      /**
       * Format: int32
       * @description ID автора
       */
      authorId?: number;
      /** @description Имя автора */
      authorName?: string | null;
      /** @description Ответ компании */
      hasCompanyResponse?: boolean;
      /**
       * Format: date-time
       * @description Дата решения проблемы
       */
      problemSolutionDate?: string | null;
      /** @description Флаг решения проблемы */
      problemSolved?: boolean;
      /** @description Конкретный продукт, на который сделан отзыв (например карта Tinkoff Black) */
      specificProductName?: string | null;
      /**
       * Format: int32
       * @description Идентификатор отзыва
       */
      id?: number;
      /** @description Заголовок отзыва */
      title?: string | null;
      /** @description Текст отзыва */
      text?: string | null;
      /** @description Физический или юридический отзыв */
      isLegal?: boolean | null;
      /** @description Список коментариев */
      comments?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.CommentModel"][] | null;
      location?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.LocationModel"];
      serviceTag?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.FeatureModel"];
    };
    /**
     * @description Статусы проверки оценки отзыва
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewRateStatus": "unknown" | "rateNotAvailable" | "rateChecking" | "rateApproved" | "rateModified" | "rateRejected" | "rateIncluded";
    "Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewSortedByEventModel": {
      /**
       * Format: date-time
       * @description Дата создания
       */
      date?: string | null;
      /**
       * Format: int32
       * @description Оценка
       */
      rate?: number | null;
      rateStatus?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewRateStatus"];
      /**
       * Format: int32
       * @description ID автора
       */
      authorId?: number;
      /** @description Имя автора */
      authorName?: string | null;
      /** @description Ответ компании */
      hasCompanyResponse?: boolean;
      /**
       * Format: date-time
       * @description Дата решения проблемы
       */
      problemSolutionDate?: string | null;
      /** @description Флаг решения проблемы */
      problemSolved?: boolean;
      /** @description Конкретный продукт, на который сделан отзыв (например карта Tinkoff Black) */
      specificProductName?: string | null;
      /**
       * Format: int32
       * @description Идентификатор отзыва
       */
      id?: number;
      /** @description Заголовок отзыва */
      title?: string | null;
      /** @description Текст отзыва */
      text?: string | null;
      /** @description Физический или юридический отзыв */
      isLegal?: boolean | null;
      /** @description Список коментариев */
      comments?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.CommentModel"][] | null;
      location?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.LocationModel"];
      serviceTag?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.FeatureModel"];
      eventType?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewActivityEventType"];
      /**
       * Format: date-time
       * @description Самое свежее изменение по этому событию
       */
      lastModifiedDate?: string;
    };
    /** @description Модель для отдельной ручки с передачей номера телефона и прочих персональных данных пользователя */
    "Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewWithUserDataModel": {
      /**
       * Format: date-time
       * @description Дата создания
       */
      date?: string | null;
      /**
       * Format: int32
       * @description Оценка
       */
      rate?: number | null;
      rateStatus?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewRateStatus"];
      /**
       * Format: int32
       * @description ID автора
       */
      authorId?: number;
      /** @description Имя автора */
      authorName?: string | null;
      /** @description Ответ компании */
      hasCompanyResponse?: boolean;
      /**
       * Format: date-time
       * @description Дата решения проблемы
       */
      problemSolutionDate?: string | null;
      /** @description Флаг решения проблемы */
      problemSolved?: boolean;
      /** @description Конкретный продукт, на который сделан отзыв (например карта Tinkoff Black) */
      specificProductName?: string | null;
      /**
       * Format: int32
       * @description Идентификатор отзыва
       */
      id?: number;
      /** @description Заголовок отзыва */
      title?: string | null;
      /** @description Текст отзыва */
      text?: string | null;
      /** @description Физический или юридический отзыв */
      isLegal?: boolean | null;
      /** @description Список коментариев */
      comments?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.CommentModel"][] | null;
      location?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.LocationModel"];
      serviceTag?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.FeatureModel"];
      /** @description Телефон пользователя */
      authorPhone?: string | null;
    };
    /** @description Модель для отдельной ручки с передачей номера телефона и прочих персональных данных пользователя */
    "Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewWithUserDataSortedByEventModel": {
      /**
       * Format: date-time
       * @description Дата создания
       */
      date?: string | null;
      /**
       * Format: int32
       * @description Оценка
       */
      rate?: number | null;
      rateStatus?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewRateStatus"];
      /**
       * Format: int32
       * @description ID автора
       */
      authorId?: number;
      /** @description Имя автора */
      authorName?: string | null;
      /** @description Ответ компании */
      hasCompanyResponse?: boolean;
      /**
       * Format: date-time
       * @description Дата решения проблемы
       */
      problemSolutionDate?: string | null;
      /** @description Флаг решения проблемы */
      problemSolved?: boolean;
      /** @description Конкретный продукт, на который сделан отзыв (например карта Tinkoff Black) */
      specificProductName?: string | null;
      /**
       * Format: int32
       * @description Идентификатор отзыва
       */
      id?: number;
      /** @description Заголовок отзыва */
      title?: string | null;
      /** @description Текст отзыва */
      text?: string | null;
      /** @description Физический или юридический отзыв */
      isLegal?: boolean | null;
      /** @description Список коментариев */
      comments?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.CommentModel"][] | null;
      location?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.LocationModel"];
      serviceTag?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.FeatureModel"];
      eventType?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewActivityEventType"];
      /**
       * Format: date-time
       * @description Самое свежее изменение по этому событию
       */
      lastModifiedDate?: string;
      /** @description Телефон пользователя */
      authorPhone?: string | null;
    };
    "Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      items?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewModel"][] | null;
      /** Format: int32 */
      pageIndex?: number;
      /** Format: int32 */
      pageSize?: number;
      /** Format: int32 */
      total?: number;
    };
    "Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewSortedByEventModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      items?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewSortedByEventModel"][] | null;
      /** Format: int32 */
      pageIndex?: number;
      /** Format: int32 */
      pageSize?: number;
      /** Format: int32 */
      total?: number;
    };
    "Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewWithUserDataModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      items?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewWithUserDataModel"][] | null;
      /** Format: int32 */
      pageIndex?: number;
      /** Format: int32 */
      pageSize?: number;
      /** Format: int32 */
      total?: number;
    };
    "Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewsResponse`1[[Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewWithUserDataSortedByEventModel, Sravni.ApiGateway.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      items?: components["schemas"]["Sravni.ApiGateway.Service.Reviews.v1.Models.ReviewWithUserDataSortedByEventModel"][] | null;
      /** Format: int32 */
      pageIndex?: number;
      /** Format: int32 */
      pageSize?: number;
      /** Format: int32 */
      total?: number;
    };
    /**
     * @description Род
     * @enum {string}
     */
    "Sravni.ApiGateway.Service.Suggest.v1.Models.Gender": "m" | "f";
    /** @description Класс представляющий имя */
    "Sravni.ApiGateway.Service.Suggest.v1.Models.Name": {
      /** @description Имя */
      value?: string | null;
      /** @description Род */
      gender?: string | null;
    };
    /** @description Запрос на создание приватной короткой ссылки */
    "Sravni.ApiGateway.Service.UrlShrinker.v1.Models.CreatePrivateRequest": {
      /**
       * Format: uri
       * @description Исходный адрес
       */
      url: string;
      /** @description Срок жизни ссылки в формате ISO 8601 Duration, см. https://en.wikipedia.org/wiki/ISO_8601#Durations */
      ttl: string;
      /**
       * Format: int32
       * @description Размер хэндла короткой ссылки в символах (от 8 до 16, по умолчанию 8)
       */
      handleSize?: number | null;
    };
    /** @description Информация о приватной короткой ссылке */
    "Sravni.ApiGateway.Service.UrlShrinker.v1.Models.PrivateResponse": {
      /** @description Исходный адрес */
      sourceUrl?: string | null;
      /** @description Короткий адрес */
      shortUrl?: string | null;
      /** @description Короткий адрес для мобильного приложения */
      mobileShortUrl?: string | null;
      /**
       * Format: date-time
       * @description Дата создания в UTC
       */
      created?: string;
      /**
       * Format: date-time
       * @description Дата устаревания в UTC
       */
      expires?: string;
    };
    "Sravni.Micro.Errors.Error": {
      code?: string | null;
      target?: string | null;
      message?: string | null;
      attemptedValue?: string | null;
      details?: components["schemas"]["Sravni.Micro.Errors.Error"][] | null;
    };
    "Sravni.Micro.Errors.ErrorModel": {
      error?: components["schemas"]["Sravni.Micro.Errors.Error"];
    };
    "System.Collections.Generic.KeyValuePair`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.Extensions.Primitives.StringValues, Microsoft.Extensions.Primitives, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]": {
      key?: string | null;
      value?: string[];
    };
    "System.Collections.Generic.KeyValuePair`2[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]": {
      key?: string | null;
      value?: string | null;
    };
    "System.Collections.Generic.KeyValuePair`2[[System.Type, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]": {
      key?: components["schemas"]["System.Type"];
      value?: Record<string, unknown> | null;
    };
    "System.Exception": {
      targetSite?: components["schemas"]["System.Reflection.MethodBase"];
      message?: string | null;
      data?: {
        [key: string]: unknown;
      } | null;
      innerException?: components["schemas"]["System.Exception"];
      helpLink?: string | null;
      source?: string | null;
      /** Format: int32 */
      hResult?: number;
      stackTrace?: string | null;
    };
    "System.Func`2[[Microsoft.AspNetCore.Mvc.ActionContext, Microsoft.AspNetCore.Mvc.Abstractions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]": {
      target?: Record<string, unknown> | null;
      method?: components["schemas"]["System.Reflection.MethodInfo"];
    };
    "System.Func`2[[Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.Abstractions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Boolean, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]": {
      target?: Record<string, unknown> | null;
      method?: components["schemas"]["System.Reflection.MethodInfo"];
    };
    "System.IO.Pipelines.PipeReader": Record<string, never>;
    "System.IO.Pipelines.PipeWriter": {
      canGetUnflushedBytes?: boolean;
      /** Format: int64 */
      unflushedBytes?: number;
    };
    "System.IO.Stream": {
      canRead?: boolean;
      canWrite?: boolean;
      canSeek?: boolean;
      canTimeout?: boolean;
      /** Format: int64 */
      length?: number;
      /** Format: int64 */
      position?: number;
      /** Format: int32 */
      readTimeout?: number;
      /** Format: int32 */
      writeTimeout?: number;
    };
    "System.IServiceProvider": Record<string, never>;
    "System.IntPtr": Record<string, never>;
    "System.ModuleHandle": {
      /** Format: int32 */
      mdStreamVersion?: number;
    };
    "System.Net.IPAddress": {
      addressFamily?: components["schemas"]["System.Net.Sockets.AddressFamily"];
      /** Format: int64 */
      scopeId?: number;
      isIPv6Multicast?: boolean;
      isIPv6LinkLocal?: boolean;
      isIPv6SiteLocal?: boolean;
      isIPv6Teredo?: boolean;
      isIPv6UniqueLocal?: boolean;
      isIPv4MappedToIPv6?: boolean;
      /**
       * Format: int64
       * @deprecated
       */
      address?: number;
    };
    /** @enum {string} */
    "System.Net.Sockets.AddressFamily": "unspecified" | "unix" | "interNetwork" | "impLink" | "pup" | "chaos" | "ns" | "osi" | "ecma" | "dataKit" | "ccitt" | "sna" | "decNet" | "dataLink" | "lat" | "hyperChannel" | "appleTalk" | "netBios" | "voiceView" | "fireFox" | "banyan" | "atm" | "interNetworkV6" | "cluster" | "ieee12844" | "irda" | "networkDesigners" | "max" | "packet" | "controllerAreaNetwork" | "unknown";
    "System.Reflection.Assembly": {
      definedTypes?: (readonly components["schemas"]["System.Reflection.TypeInfo"][]) | null;
      exportedTypes?: (readonly components["schemas"]["System.Type"][]) | null;
      codeBase?: string | null;
      entryPoint?: components["schemas"]["System.Reflection.MethodInfo"];
      fullName?: string | null;
      imageRuntimeVersion?: string | null;
      isDynamic?: boolean;
      location?: string | null;
      reflectionOnly?: boolean;
      isCollectible?: boolean;
      isFullyTrusted?: boolean;
      customAttributes?: (readonly components["schemas"]["System.Reflection.CustomAttributeData"][]) | null;
      escapedCodeBase?: string | null;
      manifestModule?: components["schemas"]["System.Reflection.Module"];
      modules?: (readonly components["schemas"]["System.Reflection.Module"][]) | null;
      /** @deprecated */
      globalAssemblyCache?: boolean;
      /** Format: int64 */
      hostContext?: number;
      securityRuleSet?: components["schemas"]["System.Security.SecurityRuleSet"];
    };
    /** @enum {string} */
    "System.Reflection.CallingConventions": "standard" | "varArgs" | "any" | "hasThis" | "explicitThis";
    "System.Reflection.ConstructorInfo": {
      name?: string | null;
      declaringType?: components["schemas"]["System.Type"];
      reflectedType?: components["schemas"]["System.Type"];
      module?: components["schemas"]["System.Reflection.Module"];
      customAttributes?: (readonly components["schemas"]["System.Reflection.CustomAttributeData"][]) | null;
      isCollectible?: boolean;
      /** Format: int32 */
      metadataToken?: number;
      attributes?: components["schemas"]["System.Reflection.MethodAttributes"];
      methodImplementationFlags?: components["schemas"]["System.Reflection.MethodImplAttributes"];
      callingConvention?: components["schemas"]["System.Reflection.CallingConventions"];
      isAbstract?: boolean;
      isConstructor?: boolean;
      isFinal?: boolean;
      isHideBySig?: boolean;
      isSpecialName?: boolean;
      isStatic?: boolean;
      isVirtual?: boolean;
      isAssembly?: boolean;
      isFamily?: boolean;
      isFamilyAndAssembly?: boolean;
      isFamilyOrAssembly?: boolean;
      isPrivate?: boolean;
      isPublic?: boolean;
      isConstructedGenericMethod?: boolean;
      isGenericMethod?: boolean;
      isGenericMethodDefinition?: boolean;
      containsGenericParameters?: boolean;
      methodHandle?: components["schemas"]["System.RuntimeMethodHandle"];
      isSecurityCritical?: boolean;
      isSecuritySafeCritical?: boolean;
      isSecurityTransparent?: boolean;
      memberType?: components["schemas"]["System.Reflection.MemberTypes"];
    };
    "System.Reflection.CustomAttributeData": {
      attributeType?: components["schemas"]["System.Type"];
      constructor?: components["schemas"]["System.Reflection.ConstructorInfo"];
      constructorArguments?: (readonly components["schemas"]["System.Reflection.CustomAttributeTypedArgument"][]) | null;
      namedArguments?: (readonly components["schemas"]["System.Reflection.CustomAttributeNamedArgument"][]) | null;
    };
    "System.Reflection.CustomAttributeNamedArgument": {
      memberInfo?: components["schemas"]["System.Reflection.MemberInfo"];
      typedValue?: components["schemas"]["System.Reflection.CustomAttributeTypedArgument"];
      memberName?: string | null;
      isField?: boolean;
    };
    "System.Reflection.CustomAttributeTypedArgument": {
      argumentType?: components["schemas"]["System.Type"];
      value?: Record<string, unknown> | null;
    };
    /** @enum {string} */
    "System.Reflection.EventAttributes": "none" | "specialName" | "rtSpecialName";
    "System.Reflection.EventInfo": {
      name?: string | null;
      declaringType?: components["schemas"]["System.Type"];
      reflectedType?: components["schemas"]["System.Type"];
      module?: components["schemas"]["System.Reflection.Module"];
      customAttributes?: (readonly components["schemas"]["System.Reflection.CustomAttributeData"][]) | null;
      isCollectible?: boolean;
      /** Format: int32 */
      metadataToken?: number;
      memberType?: components["schemas"]["System.Reflection.MemberTypes"];
      attributes?: components["schemas"]["System.Reflection.EventAttributes"];
      isSpecialName?: boolean;
      addMethod?: components["schemas"]["System.Reflection.MethodInfo"];
      removeMethod?: components["schemas"]["System.Reflection.MethodInfo"];
      raiseMethod?: components["schemas"]["System.Reflection.MethodInfo"];
      isMulticast?: boolean;
      eventHandlerType?: components["schemas"]["System.Type"];
    };
    /** @enum {string} */
    "System.Reflection.FieldAttributes": "privateScope" | "private" | "famANDAssem" | "assembly" | "family" | "famORAssem" | "public" | "fieldAccessMask" | "static" | "initOnly" | "literal" | "notSerialized" | "hasFieldRVA" | "specialName" | "rtSpecialName" | "hasFieldMarshal" | "pinvokeImpl" | "hasDefault" | "reservedMask";
    "System.Reflection.FieldInfo": {
      name?: string | null;
      declaringType?: components["schemas"]["System.Type"];
      reflectedType?: components["schemas"]["System.Type"];
      module?: components["schemas"]["System.Reflection.Module"];
      customAttributes?: (readonly components["schemas"]["System.Reflection.CustomAttributeData"][]) | null;
      isCollectible?: boolean;
      /** Format: int32 */
      metadataToken?: number;
      memberType?: components["schemas"]["System.Reflection.MemberTypes"];
      attributes?: components["schemas"]["System.Reflection.FieldAttributes"];
      fieldType?: components["schemas"]["System.Type"];
      isInitOnly?: boolean;
      isLiteral?: boolean;
      isNotSerialized?: boolean;
      isPinvokeImpl?: boolean;
      isSpecialName?: boolean;
      isStatic?: boolean;
      isAssembly?: boolean;
      isFamily?: boolean;
      isFamilyAndAssembly?: boolean;
      isFamilyOrAssembly?: boolean;
      isPrivate?: boolean;
      isPublic?: boolean;
      isSecurityCritical?: boolean;
      isSecuritySafeCritical?: boolean;
      isSecurityTransparent?: boolean;
      fieldHandle?: components["schemas"]["System.RuntimeFieldHandle"];
    };
    /** @enum {string} */
    "System.Reflection.GenericParameterAttributes": "none" | "covariant" | "contravariant" | "varianceMask" | "referenceTypeConstraint" | "notNullableValueTypeConstraint" | "defaultConstructorConstraint" | "specialConstraintMask";
    "System.Reflection.ICustomAttributeProvider": Record<string, never>;
    "System.Reflection.MemberInfo": {
      memberType?: components["schemas"]["System.Reflection.MemberTypes"];
      declaringType?: components["schemas"]["System.Type"];
      reflectedType?: components["schemas"]["System.Type"];
      name?: string | null;
      module?: components["schemas"]["System.Reflection.Module"];
      customAttributes?: (readonly components["schemas"]["System.Reflection.CustomAttributeData"][]) | null;
      isCollectible?: boolean;
      /** Format: int32 */
      metadataToken?: number;
    };
    /** @enum {string} */
    "System.Reflection.MemberTypes": "constructor" | "event" | "field" | "method" | "property" | "typeInfo" | "custom" | "nestedType" | "all";
    /** @enum {string} */
    "System.Reflection.MethodAttributes": "reuseSlot" | "private" | "famANDAssem" | "assembly" | "family" | "famORAssem" | "public" | "memberAccessMask" | "unmanagedExport" | "static" | "final" | "virtual" | "hideBySig" | "newSlot" | "checkAccessOnOverride" | "abstract" | "specialName" | "rtSpecialName" | "pinvokeImpl" | "hasSecurity" | "requireSecObject" | "reservedMask";
    "System.Reflection.MethodBase": {
      memberType?: components["schemas"]["System.Reflection.MemberTypes"];
      name?: string | null;
      declaringType?: components["schemas"]["System.Type"];
      reflectedType?: components["schemas"]["System.Type"];
      module?: components["schemas"]["System.Reflection.Module"];
      customAttributes?: (readonly components["schemas"]["System.Reflection.CustomAttributeData"][]) | null;
      isCollectible?: boolean;
      /** Format: int32 */
      metadataToken?: number;
      attributes?: components["schemas"]["System.Reflection.MethodAttributes"];
      methodImplementationFlags?: components["schemas"]["System.Reflection.MethodImplAttributes"];
      callingConvention?: components["schemas"]["System.Reflection.CallingConventions"];
      isAbstract?: boolean;
      isConstructor?: boolean;
      isFinal?: boolean;
      isHideBySig?: boolean;
      isSpecialName?: boolean;
      isStatic?: boolean;
      isVirtual?: boolean;
      isAssembly?: boolean;
      isFamily?: boolean;
      isFamilyAndAssembly?: boolean;
      isFamilyOrAssembly?: boolean;
      isPrivate?: boolean;
      isPublic?: boolean;
      isConstructedGenericMethod?: boolean;
      isGenericMethod?: boolean;
      isGenericMethodDefinition?: boolean;
      containsGenericParameters?: boolean;
      methodHandle?: components["schemas"]["System.RuntimeMethodHandle"];
      isSecurityCritical?: boolean;
      isSecuritySafeCritical?: boolean;
      isSecurityTransparent?: boolean;
    };
    /** @enum {string} */
    "System.Reflection.MethodImplAttributes": "il" | "native" | "optil" | "runtime" | "unmanaged" | "noInlining" | "forwardRef" | "synchronized" | "noOptimization" | "preserveSig" | "aggressiveInlining" | "aggressiveOptimization" | "internalCall" | "maxMethodImplVal";
    "System.Reflection.MethodInfo": {
      name?: string | null;
      declaringType?: components["schemas"]["System.Type"];
      reflectedType?: components["schemas"]["System.Type"];
      module?: components["schemas"]["System.Reflection.Module"];
      customAttributes?: (readonly components["schemas"]["System.Reflection.CustomAttributeData"][]) | null;
      isCollectible?: boolean;
      /** Format: int32 */
      metadataToken?: number;
      attributes?: components["schemas"]["System.Reflection.MethodAttributes"];
      methodImplementationFlags?: components["schemas"]["System.Reflection.MethodImplAttributes"];
      callingConvention?: components["schemas"]["System.Reflection.CallingConventions"];
      isAbstract?: boolean;
      isConstructor?: boolean;
      isFinal?: boolean;
      isHideBySig?: boolean;
      isSpecialName?: boolean;
      isStatic?: boolean;
      isVirtual?: boolean;
      isAssembly?: boolean;
      isFamily?: boolean;
      isFamilyAndAssembly?: boolean;
      isFamilyOrAssembly?: boolean;
      isPrivate?: boolean;
      isPublic?: boolean;
      isConstructedGenericMethod?: boolean;
      isGenericMethod?: boolean;
      isGenericMethodDefinition?: boolean;
      containsGenericParameters?: boolean;
      methodHandle?: components["schemas"]["System.RuntimeMethodHandle"];
      isSecurityCritical?: boolean;
      isSecuritySafeCritical?: boolean;
      isSecurityTransparent?: boolean;
      memberType?: components["schemas"]["System.Reflection.MemberTypes"];
      returnParameter?: components["schemas"]["System.Reflection.ParameterInfo"];
      returnType?: components["schemas"]["System.Type"];
      returnTypeCustomAttributes?: components["schemas"]["System.Reflection.ICustomAttributeProvider"];
    };
    "System.Reflection.Module": {
      assembly?: components["schemas"]["System.Reflection.Assembly"];
      fullyQualifiedName?: string | null;
      name?: string | null;
      /** Format: int32 */
      mdStreamVersion?: number;
      /** Format: uuid */
      moduleVersionId?: string;
      scopeName?: string | null;
      moduleHandle?: components["schemas"]["System.ModuleHandle"];
      customAttributes?: (readonly components["schemas"]["System.Reflection.CustomAttributeData"][]) | null;
      /** Format: int32 */
      metadataToken?: number;
    };
    /** @enum {string} */
    "System.Reflection.ParameterAttributes": "none" | "in" | "out" | "lcid" | "retval" | "optional" | "hasDefault" | "hasFieldMarshal" | "reserved3" | "reserved4" | "reservedMask";
    "System.Reflection.ParameterInfo": {
      attributes?: components["schemas"]["System.Reflection.ParameterAttributes"];
      member?: components["schemas"]["System.Reflection.MemberInfo"];
      name?: string | null;
      parameterType?: components["schemas"]["System.Type"];
      /** Format: int32 */
      position?: number;
      isIn?: boolean;
      isLcid?: boolean;
      isOptional?: boolean;
      isOut?: boolean;
      isRetval?: boolean;
      defaultValue?: Record<string, unknown> | null;
      rawDefaultValue?: Record<string, unknown> | null;
      hasDefaultValue?: boolean;
      customAttributes?: (readonly components["schemas"]["System.Reflection.CustomAttributeData"][]) | null;
      /** Format: int32 */
      metadataToken?: number;
    };
    /** @enum {string} */
    "System.Reflection.PropertyAttributes": "none" | "specialName" | "rtSpecialName" | "hasDefault" | "reserved2" | "reserved3" | "reserved4" | "reservedMask";
    "System.Reflection.PropertyInfo": {
      name?: string | null;
      declaringType?: components["schemas"]["System.Type"];
      reflectedType?: components["schemas"]["System.Type"];
      module?: components["schemas"]["System.Reflection.Module"];
      customAttributes?: (readonly components["schemas"]["System.Reflection.CustomAttributeData"][]) | null;
      isCollectible?: boolean;
      /** Format: int32 */
      metadataToken?: number;
      memberType?: components["schemas"]["System.Reflection.MemberTypes"];
      propertyType?: components["schemas"]["System.Type"];
      attributes?: components["schemas"]["System.Reflection.PropertyAttributes"];
      isSpecialName?: boolean;
      canRead?: boolean;
      canWrite?: boolean;
      getMethod?: components["schemas"]["System.Reflection.MethodInfo"];
      setMethod?: components["schemas"]["System.Reflection.MethodInfo"];
    };
    /** @enum {string} */
    "System.Reflection.TypeAttributes": "notPublic" | "public" | "nestedPublic" | "nestedPrivate" | "nestedFamily" | "nestedAssembly" | "nestedFamANDAssem" | "nestedFamORAssem" | "sequentialLayout" | "explicitLayout" | "layoutMask" | "interface" | "abstract" | "sealed" | "specialName" | "rtSpecialName" | "import" | "serializable" | "windowsRuntime" | "unicodeClass" | "autoClass" | "customFormatClass" | "hasSecurity" | "reservedMask" | "beforeFieldInit" | "customFormatMask";
    "System.Reflection.TypeInfo": {
      name?: string | null;
      customAttributes?: (readonly components["schemas"]["System.Reflection.CustomAttributeData"][]) | null;
      isCollectible?: boolean;
      /** Format: int32 */
      metadataToken?: number;
      isInterface?: boolean;
      memberType?: components["schemas"]["System.Reflection.MemberTypes"];
      namespace?: string | null;
      assemblyQualifiedName?: string | null;
      fullName?: string | null;
      assembly?: components["schemas"]["System.Reflection.Assembly"];
      module?: components["schemas"]["System.Reflection.Module"];
      isNested?: boolean;
      declaringType?: components["schemas"]["System.Type"];
      declaringMethod?: components["schemas"]["System.Reflection.MethodBase"];
      reflectedType?: components["schemas"]["System.Type"];
      underlyingSystemType?: components["schemas"]["System.Type"];
      isTypeDefinition?: boolean;
      isArray?: boolean;
      isByRef?: boolean;
      isPointer?: boolean;
      isConstructedGenericType?: boolean;
      isGenericParameter?: boolean;
      isGenericTypeParameter?: boolean;
      isGenericMethodParameter?: boolean;
      isGenericType?: boolean;
      isGenericTypeDefinition?: boolean;
      isSZArray?: boolean;
      isVariableBoundArray?: boolean;
      isByRefLike?: boolean;
      hasElementType?: boolean;
      genericTypeArguments?: (readonly components["schemas"]["System.Type"][]) | null;
      /** Format: int32 */
      genericParameterPosition?: number;
      genericParameterAttributes?: components["schemas"]["System.Reflection.GenericParameterAttributes"];
      attributes?: components["schemas"]["System.Reflection.TypeAttributes"];
      isAbstract?: boolean;
      isImport?: boolean;
      isSealed?: boolean;
      isSpecialName?: boolean;
      isClass?: boolean;
      isNestedAssembly?: boolean;
      isNestedFamANDAssem?: boolean;
      isNestedFamily?: boolean;
      isNestedFamORAssem?: boolean;
      isNestedPrivate?: boolean;
      isNestedPublic?: boolean;
      isNotPublic?: boolean;
      isPublic?: boolean;
      isAutoLayout?: boolean;
      isExplicitLayout?: boolean;
      isLayoutSequential?: boolean;
      isAnsiClass?: boolean;
      isAutoClass?: boolean;
      isUnicodeClass?: boolean;
      isCOMObject?: boolean;
      isContextful?: boolean;
      isEnum?: boolean;
      isMarshalByRef?: boolean;
      isPrimitive?: boolean;
      isValueType?: boolean;
      isSignatureType?: boolean;
      isSecurityCritical?: boolean;
      isSecuritySafeCritical?: boolean;
      isSecurityTransparent?: boolean;
      structLayoutAttribute?: components["schemas"]["System.Runtime.InteropServices.StructLayoutAttribute"];
      typeInitializer?: components["schemas"]["System.Reflection.ConstructorInfo"];
      typeHandle?: components["schemas"]["System.RuntimeTypeHandle"];
      /** Format: uuid */
      guid?: string;
      baseType?: components["schemas"]["System.Type"];
      isSerializable?: boolean;
      containsGenericParameters?: boolean;
      isVisible?: boolean;
      genericTypeParameters?: (readonly components["schemas"]["System.Type"][]) | null;
      declaredConstructors?: (readonly components["schemas"]["System.Reflection.ConstructorInfo"][]) | null;
      declaredEvents?: (readonly components["schemas"]["System.Reflection.EventInfo"][]) | null;
      declaredFields?: (readonly components["schemas"]["System.Reflection.FieldInfo"][]) | null;
      declaredMembers?: (readonly components["schemas"]["System.Reflection.MemberInfo"][]) | null;
      declaredMethods?: (readonly components["schemas"]["System.Reflection.MethodInfo"][]) | null;
      declaredNestedTypes?: (readonly components["schemas"]["System.Reflection.TypeInfo"][]) | null;
      declaredProperties?: (readonly components["schemas"]["System.Reflection.PropertyInfo"][]) | null;
      implementedInterfaces?: (readonly components["schemas"]["System.Type"][]) | null;
    };
    /** @enum {string} */
    "System.Runtime.InteropServices.LayoutKind": "sequential" | "explicit" | "auto";
    "System.Runtime.InteropServices.StructLayoutAttribute": {
      typeId?: Record<string, unknown> | null;
      value?: components["schemas"]["System.Runtime.InteropServices.LayoutKind"];
    };
    "System.RuntimeFieldHandle": {
      value?: components["schemas"]["System.IntPtr"];
    };
    "System.RuntimeMethodHandle": {
      value?: components["schemas"]["System.IntPtr"];
    };
    "System.RuntimeTypeHandle": {
      value?: components["schemas"]["System.IntPtr"];
    };
    "System.Security.Claims.Claim": {
      issuer?: string | null;
      originalIssuer?: string | null;
      properties?: {
        [key: string]: string;
      } | null;
      subject?: components["schemas"]["System.Security.Claims.ClaimsIdentity"];
      type?: string | null;
      value?: string | null;
      valueType?: string | null;
    };
    "System.Security.Claims.ClaimsIdentity": {
      authenticationType?: string | null;
      isAuthenticated?: boolean;
      actor?: components["schemas"]["System.Security.Claims.ClaimsIdentity"];
      bootstrapContext?: Record<string, unknown> | null;
      claims?: (readonly components["schemas"]["System.Security.Claims.Claim"][]) | null;
      label?: string | null;
      name?: string | null;
      nameClaimType?: string | null;
      roleClaimType?: string | null;
    };
    "System.Security.Claims.ClaimsPrincipal": {
      claims?: (readonly components["schemas"]["System.Security.Claims.Claim"][]) | null;
      identities?: (readonly components["schemas"]["System.Security.Claims.ClaimsIdentity"][]) | null;
      identity?: components["schemas"]["System.Security.Principal.IIdentity"];
    };
    "System.Security.Cryptography.AsnEncodedData": {
      oid?: components["schemas"]["System.Security.Cryptography.Oid"];
      /** Format: byte */
      rawData?: string | null;
    };
    "System.Security.Cryptography.AsymmetricAlgorithm": {
      /** Format: int32 */
      keySize?: number;
      legalKeySizes?: (readonly components["schemas"]["System.Security.Cryptography.KeySizes"][]) | null;
      signatureAlgorithm?: string | null;
      keyExchangeAlgorithm?: string | null;
    };
    "System.Security.Cryptography.KeySizes": {
      /** Format: int32 */
      minSize?: number;
      /** Format: int32 */
      maxSize?: number;
      /** Format: int32 */
      skipSize?: number;
    };
    "System.Security.Cryptography.Oid": {
      value?: string | null;
      friendlyName?: string | null;
    };
    "System.Security.Cryptography.X509Certificates.PublicKey": {
      encodedKeyValue?: components["schemas"]["System.Security.Cryptography.AsnEncodedData"];
      encodedParameters?: components["schemas"]["System.Security.Cryptography.AsnEncodedData"];
      key?: components["schemas"]["System.Security.Cryptography.AsymmetricAlgorithm"];
      oid?: components["schemas"]["System.Security.Cryptography.Oid"];
    };
    "System.Security.Cryptography.X509Certificates.X500DistinguishedName": {
      oid?: components["schemas"]["System.Security.Cryptography.Oid"];
      /** Format: byte */
      rawData?: string | null;
      name?: string | null;
    };
    "System.Security.Cryptography.X509Certificates.X509Certificate2": {
      handle?: components["schemas"]["System.IntPtr"];
      issuer?: string | null;
      subject?: string | null;
      archived?: boolean;
      extensions?: (readonly components["schemas"]["System.Security.Cryptography.X509Certificates.X509Extension"][]) | null;
      friendlyName?: string | null;
      hasPrivateKey?: boolean;
      privateKey?: components["schemas"]["System.Security.Cryptography.AsymmetricAlgorithm"];
      issuerName?: components["schemas"]["System.Security.Cryptography.X509Certificates.X500DistinguishedName"];
      /** Format: date-time */
      notAfter?: string;
      /** Format: date-time */
      notBefore?: string;
      publicKey?: components["schemas"]["System.Security.Cryptography.X509Certificates.PublicKey"];
      /** Format: byte */
      rawData?: string | null;
      serialNumber?: string | null;
      signatureAlgorithm?: components["schemas"]["System.Security.Cryptography.Oid"];
      subjectName?: components["schemas"]["System.Security.Cryptography.X509Certificates.X500DistinguishedName"];
      thumbprint?: string | null;
      /** Format: int32 */
      version?: number;
    };
    "System.Security.Cryptography.X509Certificates.X509Extension": {
      oid?: components["schemas"]["System.Security.Cryptography.Oid"];
      /** Format: byte */
      rawData?: string | null;
      critical?: boolean;
    };
    "System.Security.Principal.IIdentity": {
      name?: string | null;
      authenticationType?: string | null;
      isAuthenticated?: boolean;
    };
    /** @enum {string} */
    "System.Security.SecurityRuleSet": "none" | "level1" | "level2";
    "System.Threading.CancellationToken": {
      isCancellationRequested?: boolean;
      canBeCanceled?: boolean;
      waitHandle?: components["schemas"]["System.Threading.WaitHandle"];
    };
    "System.Threading.WaitHandle": {
      handle?: components["schemas"]["System.IntPtr"];
      safeWaitHandle?: components["schemas"]["Microsoft.Win32.SafeHandles.SafeWaitHandle"];
    };
    "System.Type": {
      name?: string | null;
      customAttributes?: (readonly components["schemas"]["System.Reflection.CustomAttributeData"][]) | null;
      isCollectible?: boolean;
      /** Format: int32 */
      metadataToken?: number;
      isInterface?: boolean;
      memberType?: components["schemas"]["System.Reflection.MemberTypes"];
      namespace?: string | null;
      assemblyQualifiedName?: string | null;
      fullName?: string | null;
      assembly?: components["schemas"]["System.Reflection.Assembly"];
      module?: components["schemas"]["System.Reflection.Module"];
      isNested?: boolean;
      declaringType?: components["schemas"]["System.Type"];
      declaringMethod?: components["schemas"]["System.Reflection.MethodBase"];
      reflectedType?: components["schemas"]["System.Type"];
      underlyingSystemType?: components["schemas"]["System.Type"];
      isTypeDefinition?: boolean;
      isArray?: boolean;
      isByRef?: boolean;
      isPointer?: boolean;
      isConstructedGenericType?: boolean;
      isGenericParameter?: boolean;
      isGenericTypeParameter?: boolean;
      isGenericMethodParameter?: boolean;
      isGenericType?: boolean;
      isGenericTypeDefinition?: boolean;
      isSZArray?: boolean;
      isVariableBoundArray?: boolean;
      isByRefLike?: boolean;
      hasElementType?: boolean;
      genericTypeArguments?: (readonly components["schemas"]["System.Type"][]) | null;
      /** Format: int32 */
      genericParameterPosition?: number;
      genericParameterAttributes?: components["schemas"]["System.Reflection.GenericParameterAttributes"];
      attributes?: components["schemas"]["System.Reflection.TypeAttributes"];
      isAbstract?: boolean;
      isImport?: boolean;
      isSealed?: boolean;
      isSpecialName?: boolean;
      isClass?: boolean;
      isNestedAssembly?: boolean;
      isNestedFamANDAssem?: boolean;
      isNestedFamily?: boolean;
      isNestedFamORAssem?: boolean;
      isNestedPrivate?: boolean;
      isNestedPublic?: boolean;
      isNotPublic?: boolean;
      isPublic?: boolean;
      isAutoLayout?: boolean;
      isExplicitLayout?: boolean;
      isLayoutSequential?: boolean;
      isAnsiClass?: boolean;
      isAutoClass?: boolean;
      isUnicodeClass?: boolean;
      isCOMObject?: boolean;
      isContextful?: boolean;
      isEnum?: boolean;
      isMarshalByRef?: boolean;
      isPrimitive?: boolean;
      isValueType?: boolean;
      isSignatureType?: boolean;
      isSecurityCritical?: boolean;
      isSecuritySafeCritical?: boolean;
      isSecurityTransparent?: boolean;
      structLayoutAttribute?: components["schemas"]["System.Runtime.InteropServices.StructLayoutAttribute"];
      typeInitializer?: components["schemas"]["System.Reflection.ConstructorInfo"];
      typeHandle?: components["schemas"]["System.RuntimeTypeHandle"];
      /** Format: uuid */
      guid?: string;
      baseType?: components["schemas"]["System.Type"];
      isSerializable?: boolean;
      containsGenericParameters?: boolean;
      isVisible?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
