/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/brand/{brandId}": {
    /** Получение бренда ТС по Id */
    get: {
      parameters: {
        path: {
          /** @description Id марки */
          brandId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.BrandViewModel"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.BrandViewModel"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.BrandViewModel"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description марка не найдена */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/model/{modelId}": {
    /** Получение модели ТС по Id */
    get: {
      parameters: {
        path: {
          /** @description Id модели */
          modelId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description модель не найдена */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/models": {
    /** Получение моделей */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"][];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"][];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description модель не найдена */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brands": {
    /** Получение марок авто, без года возвращает за последние 6 лет */
    get: {
      parameters: {
        query?: {
          yearFrom?: number;
          categories?: string[];
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.BrandViewModel"][];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.BrandViewModel"][];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.BrandViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description марки не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years": {
    /** Получение годов выпуска для бренда */
    get: {
      parameters: {
        path: {
          brandId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": number[];
            "application/json": number[];
            "text/json": number[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description года выпуска для brandId не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/model/{modelId}/years": {
    /** Получение годов выпуска для модели */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          modelId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": number[];
            "application/json": number[];
            "text/json": number[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description года выпуска для modelId не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models": {
    /** Получение моделей бренда по году выпуска */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"][];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"][];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description модели для brandId и года выпуска с yearFrom не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/models": {
    /** Получение моделей бренда начиная с года */
    get: {
      parameters: {
        query?: {
          yearFrom?: number;
          categories?: string[];
        };
        path: {
          brandId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"][];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"][];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description модели для brandId и года выпуска с yearFrom не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models/{modelId}/enginevolumes": {
    /** Получение объемов двигателя модели по году выпуска */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
          modelId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"][];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"][];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description кузова для modelId и года выпуска с yearFrom не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models/{modelId}/enginevolumes/{engineVolume}/engine-powers": {
    /** Получение л/с модели по году выпуска и объему двигателя */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
          modelId: number;
          engineVolume: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": number[];
            "application/json": number[];
            "text/json": number[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description л/с для modelId, год выпуска с yearFrom, engineVolume не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models/{modelId}/engine-powers": {
    /** Получение л/с модели по году выпуска */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
          modelId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": number[];
            "application/json": number[];
            "text/json": number[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description л/с для modelId, год выпуска с yearFrom, brandId не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/models/{modelId}/max-weight": {
    /** Получение MaxWeight */
    get: {
      parameters: {
        query?: {
          power?: number;
        };
        path: {
          modelId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.AnyResult`1[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.AnyResult`1[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.AnyResult`1[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description MaxWeight для modelId, л.с. power не найдена */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/models/{modelId}/max-seats": {
    /** Получение MaxSeats */
    get: {
      parameters: {
        query?: {
          power?: number;
          categories?: string[];
        };
        path: {
          modelId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.AnyResult`1[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.AnyResult`1[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.AnyResult`1[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models/{modelId}/enginevolumes/{engineVolume}/engine-powers/{power}/bodies": {
    /** Получение кузовов модели по году выпуска, объему двигателя и л/с */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
          modelId: number;
          engineVolume: number;
          power: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"][];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"][];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description кузова для modelId, год выпуска с yearFrom, объем двигателя engineVolume, л/с power не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models/{modelId}/enginevolumes/{engineVolume}/engine-powers/{power}/bodies/{bodyId}/transmissions": {
    /** Получение коробок передач модели по году выпуска, объему двигателя, л/с и кузову */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
          modelId: number;
          engineVolume: number;
          power: number;
          bodyId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.TransmissionViewModel"][];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.TransmissionViewModel"][];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.TransmissionViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description коробки передач для modelId, год выпуска с yearFrom, объем двигателя engineVolume, л/с power, кузов bodyId не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models/{modelId}/bodies": {
    /** Получение кузовов модели по году выпуска */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
          modelId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"][];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"][];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description кузова для modelId и года выпуска с yearFrom не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models/{modelId}/bodies/{bodyId}/enginevolumes": {
    /** Получение объемов двигателя модели по году выпуска и кузову */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
          modelId: number;
          bodyId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": number[];
            "application/json": number[];
            "text/json": number[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description объемы двигателя для modelId и года выпуска с yearFrom и bodyId не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models/{modelId}/bodies/{bodyId}/enginevolumes/{engineVolume}/transmissions": {
    /** Получение коробок передач по модели, году выпуска, кузову и объему двигателя */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
          modelId: number;
          bodyId: number;
          engineVolume: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.TransmissionViewModel"][];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.TransmissionViewModel"][];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.TransmissionViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description коробоки передач для modelId, г/в с yearFrom, bodyId, engineVolume не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models/{modelId}/bodies/{bodyId}/enginevolumes/{engineVolume}/transmissions/{transmissionId}/enginePowers": {
    /** Получение л/с по модели, году выпуска, кузову, объему двигателя и коробоки передач */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
          modelId: number;
          bodyId: number;
          engineVolume: number;
          transmissionId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": number[];
            "application/json": number[];
            "text/json": number[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description л/с для modelId, год выпуска с yearFrom, bodyId, engineVolume, transmissionId не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models/{modelId}/modifications": {
    /** Получение модификаций бренда по году выпуска и модели */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
          modelId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.ModificationsResult"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModificationsResult"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModificationsResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description модификации для brandId и года выпуска с yearFrom не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models/{modelId}/powers/{power}/modifications": {
    /** Получение модификаций по году выпуска, модели и мощности */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
          modelId: number;
          power: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.ModificationWithShortNameViewModel"][];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModificationWithShortNameViewModel"][];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModificationWithShortNameViewModel"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description модификации для brandId и года выпуска с yearFrom не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/years/{yearFrom}/models/{modelId}/average-price": {
    /** Получение средний цены модели ТС */
    get: {
      parameters: {
        query?: {
          categories?: string[];
        };
        path: {
          brandId: number;
          yearFrom: number;
          modelId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelAveragePriceResult"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelAveragePriceResult"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelAveragePriceResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description модификации для brandId и года выпуска с yearFrom не найдены */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/getvehicle": {
    /** Получение информации об авто по ФИО, дате рождения и паспорту */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.Dto.CheckPersonRequest"];
          "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.Dto.CheckPersonRequest"];
          "application/*+json": components["schemas"]["Sravni.Auto.Service.v1.Models.Dto.CheckPersonRequest"];
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Services.Vehicle"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Services.Vehicle"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Services.Vehicle"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description информация для ownerInfo не найдена */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/carinfo/{modificationId}": {
    /**
     * Получение информации о ТС по Id модификации
     * @description 14767
     */
    get: {
      parameters: {
        path: {
          modificationId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.CarInfoViewModel"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.CarInfoViewModel"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.CarInfoViewModel"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description информация для modificationId не найдена */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/carinfo/rsa/{rsaId}": {
    /**
     * Получение информации о ТС по Id РСА
     * @description 000900054540040206020000056503
     */
    get: {
      parameters: {
        path: {
          rsaId: string;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.CarInfoViewModel"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.CarInfoViewModel"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.CarInfoViewModel"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description информация для rsaId не найдена */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/carinfo/model/{modelId}/body/{bodyId}": {
    /**
     * Получение информации о ТС по Id модели и Id кузова
     * @description modelId = 576, bodyId = 23
     */
    get: {
      parameters: {
        path: {
          /** @description Id модели */
          modelId: number;
          /** @description Id кузова */
          bodyId: number;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.CarInfoViewModel"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.CarInfoViewModel"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.CarInfoViewModel"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description информация не найдена */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandAlias}": {
    /** Получение бренда по alias */
    get: {
      parameters: {
        path: {
          brandAlias: string;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.BrandViewModel"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.BrandViewModel"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.BrandViewModel"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description не найдено */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/brand/{brandId}/model/{modelAlias}": {
    /** Получение модели по id бренда и alias модели */
    get: {
      parameters: {
        path: {
          brandId: number;
          modelAlias: string;
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description не найдено */
        404: {
          content: never;
        };
        /** @description ошибка сервера */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/additional-modification": {
    /** добавляет запись в таблицу AdditionalModifications */
    put: {
      parameters: {
        query?: {
          brandId?: number;
          modelId?: number;
          year?: number;
          power?: number;
          engineVolume?: number;
          code?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.AddAdditionalModificationsResult"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.AddAdditionalModificationsResult"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.AddAdditionalModificationsResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/GetRandomCarNumberForParser": {
    /** получить случайный номер автомобиля */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/GetRandomCarNumber": {
    /** получить случайный номер автомобиля */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/bigautodata/policyreport/{number}": {
    /** получить информацию по полисам */
    get: {
      parameters: {
        query?: {
          queryType?: components["schemas"]["Sravni.Auto.Service.v1.Models.AvtoInfoQueryType"];
          source?: string;
          medium?: string;
          campaign?: string;
        };
        path: {
          number: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.Dto.ParserApiInfo"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.Dto.ParserApiInfo"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.Dto.ParserApiInfo"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/bigautodata/GetOwnerChangeInfo": {
    /** Информацию о смене владельца */
    get: {
      parameters: {
        query?: {
          month?: number;
          vin?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.BigAutoData.OwnerChangeInfo.Models.BigAutoDataResponse"];
            "application/json": components["schemas"]["Sravni.Auto.Service.BigAutoData.OwnerChangeInfo.Models.BigAutoDataResponse"];
            "text/json": components["schemas"]["Sravni.Auto.Service.BigAutoData.OwnerChangeInfo.Models.BigAutoDataResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/PolicyInfo": {
    /** получить информацию по полисам */
    post: {
      requestBody?: {
        content: {
          "application/json": string[];
          "text/json": string[];
          "application/*+json": string[];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/PolicyInfoByTaskId": {
    /** получить информацию по полисам */
    get: {
      parameters: {
        query?: {
          taskId?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/JobProgress": {
    /** получить информацию по полисам */
    get: {
      parameters: {
        query?: {
          taskId?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/StartParsePolicyInfo": {
    /** запустить парсинг полисов */
    post: {
      requestBody?: {
        content: {
          "application/json": string[];
          "text/json": string[];
          "application/*+json": string[];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/autoinfo/{queryType}/{number}": {
    /**
     * Получение информации по номеру автомобиля или по VIN.
     * @description Т777ТТ71
     * XW8ZZZ61ZFG026212
     */
    get: {
      parameters: {
        path: {
          number: string;
          queryType: components["schemas"]["Sravni.Auto.Service.v1.Models.AvtoInfoQueryType"];
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.PartnerResponse`1[[Sravni.Auto.Service.v1.Models.CarInfoByNumber, Sravni.Auto.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.PartnerResponse`1[[Sravni.Auto.Service.v1.Models.CarInfoByNumber, Sravni.Auto.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.PartnerResponse`1[[Sravni.Auto.Service.v1.Models.CarInfoByNumber, Sravni.Auto.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/policyinfo/{queryType}/{number}": {
    /**
     * Получение информации о полисе по номеру автомобиля или по VIN.
     * @description Т777ТТ71
     * XW8ZZZ61ZFG026212
     */
    get: {
      parameters: {
        query?: {
          needUpdate?: boolean;
        };
        path: {
          number: string;
          queryType: components["schemas"]["Sravni.Auto.Service.v1.Models.AvtoInfoQueryType"];
        };
      };
      responses: {
        /** @description ок */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Auto.Service.v1.Models.PartnerResponse`1[[Sravni.Auto.Service.v1.Models.PartnerApiPolicyInfoResponse, Sravni.Auto.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "application/json": components["schemas"]["Sravni.Auto.Service.v1.Models.PartnerResponse`1[[Sravni.Auto.Service.v1.Models.PartnerApiPolicyInfoResponse, Sravni.Auto.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
            "text/json": components["schemas"]["Sravni.Auto.Service.v1.Models.PartnerResponse`1[[Sravni.Auto.Service.v1.Models.PartnerApiPolicyInfoResponse, Sravni.Auto.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/GetEnv": {
    get: {
      responses: {
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    "Sravni.Auto.Car.BodyStyle": "unknown" | "cuv" | "hatchback" | "sw" | "sedan" | "cabriolet" | "coupe" | "roadster" | "muv" | "pickup" | "allMetalWagon" | "van" | "microBus" | "аlatbedTruck" | "isoWagon" | "productWagon" | "furnitureWagon" | "chassis" | "weightWagon" | "one" | "dumpTruck" | "liftback" | "fastback" | "sleepingCabinChassis" | "sleepingCabinTruck" | "tiltTruck" | "doubleCabinChassis" | "awdChassis" | "fullMetalHighVolumeWagon" | "fullMetalHighRoofWagon" | "suv" | "chassisPlatformWithBedCabin" | "semiTrailerTruckWithNormalCabin" | "doubleCabinTiltedChasis" | "tiltedChassis" | "doubleCabinTiltedChassis" | "shopTrailerWagon" | "multipurposeWagon" | "foodWagon" | "breadWagon" | "tiltedWagon" | "semiTrailerTruck" | "bus" | "refridgerator" | "sportTourism" | "superSport" | "enduro" | "roadBike" | "tourismBike" | "scooter" | "sportBike" | "chopper" | "quadBike" | "moped" | "busThirdClass" | "busSecondClass" | "busFirstClass" | "tricycles" | "tricycle" | "limousine";
    /** @enum {string} */
    "Sravni.Auto.Car.TransmissionType": "unknown" | "mt" | "at" | "cvt" | "sat";
    /** @enum {string} */
    "Sravni.Auto.Engine.EngineFuelType": "unknown" | "petrol" | "diesel" | "gas" | "electricity";
    "Sravni.Auto.Service.BigAutoData.OwnerChangeInfo.Models.BigAutoDataResponse": {
      response?: components["schemas"]["Sravni.Auto.Service.BigAutoData.OwnerChangeInfo.Models.OwnerChangeInfo"];
    };
    "Sravni.Auto.Service.BigAutoData.OwnerChangeInfo.Models.OwnerChangeInfo": {
      id?: string | null;
      /** Format: double */
      cost?: number | null;
      method?: string | null;
      is_error?: boolean;
      is_completed?: boolean;
      result?: components["schemas"]["Sravni.Auto.Service.BigAutoData.OwnerChangeInfo.Models.OwnerChangeInfoResult"][] | null;
    };
    "Sravni.Auto.Service.BigAutoData.OwnerChangeInfo.Models.OwnerChangeInfoResult": {
      is_owner_changed?: boolean;
      /** Format: date-time */
      owner_change_date?: string | null;
      /** Format: date-time */
      policy_start_date?: string | null;
      vin?: string | null;
    };
    "Sravni.Auto.Service.v1.Models.AddAdditionalModificationsResult": {
      result?: boolean;
      error?: string | null;
    };
    "Sravni.Auto.Service.v1.Models.AnyResult`1[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]": {
      /** Format: int32 */
      result?: number;
    };
    /**
     * @description Тип данных, по которым нужно узнать информацию о ТС.
     * @enum {string}
     */
    "Sravni.Auto.Service.v1.Models.AvtoInfoQueryType": "number" | "vin" | "body" | "chassis" | "policy";
    /** @description Модель вью кузова авто */
    "Sravni.Auto.Service.v1.Models.BodyViewModel": {
      /**
       * Format: int32
       * @description Id
       */
      id?: number | null;
      /** @description Название */
      name?: string | null;
    };
    /** @description Модель вью марки авто */
    "Sravni.Auto.Service.v1.Models.BrandViewModel": {
      /**
       * Format: int32
       * @description Id
       */
      id?: number;
      /** @description Название */
      name?: string | null;
      /** @description Название русское */
      nameRus?: string | null;
      /** @description Алиас */
      alias?: string | null;
      /**
       * Format: int32
       * @description Популярность
       */
      popularity?: number;
      /** @description Первая буква марки */
      firstLetter?: string;
      /** @description Иностранная? */
      isImported?: boolean;
      /** @description Популярная? */
      isPopular?: boolean;
    };
    /** @description Данные о документе на ТС */
    "Sravni.Auto.Service.v1.Models.CarDocumentInfoViewModel": {
      /** @description Серия */
      series?: string | null;
      /** @description Номер */
      number?: string | null;
      documentType?: components["schemas"]["Sravni.Auto.Service.v1.Models.CarDocumentType"];
      /**
       * Format: date-time
       * @description Дата выдачи
       */
      date?: string | null;
    };
    /**
     * @description Тип документа на ТС
     * @enum {string}
     */
    "Sravni.Auto.Service.v1.Models.CarDocumentType": "pts" | "sts" | "ePts";
    /** @description Информация по номеру авто и связанные с ней данные для заполнения формы */
    "Sravni.Auto.Service.v1.Models.CarInfoByNumber": {
      brand?: components["schemas"]["Sravni.Auto.Service.v1.Models.BrandViewModel"];
      model?: components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"];
      carDocument?: components["schemas"]["Sravni.Auto.Service.v1.Models.CarDocumentInfoViewModel"];
      /** @description VIN */
      vin?: string | null;
      /** @description Номер кузова */
      bodyNumber?: string | null;
      /** @description Номер Шасси */
      chassisNumber?: string | null;
      /** @description Регистрационный номер автомобиля. */
      carNumber?: string | null;
      /**
       * Format: int32
       * @description Год выпуска
       */
      year?: number;
      /**
       * Format: int32
       * @description Мощность л.с.
       */
      power?: number;
      /** @description Цвет кузова */
      color?: string | null;
      /**
       * Format: int32
       * @description Минимально возможное значение лошадиных сил.
       */
      minPower?: number;
      /**
       * Format: int32
       * @description Максимально возможное значение лошадиных сил.
       */
      maxPower?: number;
      /**
       * Format: double
       * @description Обьем двигателя
       */
      volume?: number;
      /**
       * Format: date-time
       * @description Дата регистрации
       */
      registrationDate?: string;
      /** @description Номер диагностической карты */
      diagnosticCardNumber?: string | null;
      /**
       * Format: date-time
       * @description Дата начала действия диагностической карт
       */
      diagnosticCardDateFrom?: string;
      /**
       * Format: date-time
       * @description Дата окончания действия диагностической карты
       */
      diagnosticCardDateTo?: string;
      /**
       * Format: date-time
       * @description Дата выдачи СТС
       */
      stsReceive?: string | null;
      /** @description Такси? */
      isTaxi?: boolean | null;
      /** @description Правый руль? */
      isRightWheel?: boolean | null;
      /** @description частичный? */
      isPartial?: boolean;
      /** @description Категория */
      category?: string | null;
      /** @description Список уникальных кузовов из Modifications */
      bodies?: components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"][] | null;
      /** @description Список уникальных коробок передач из Modifications */
      transmissions?: components["schemas"]["Sravni.Auto.Service.v1.Models.TransmissionViewModel"][] | null;
      carBody?: components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"];
      transmission?: components["schemas"]["Sravni.Auto.Service.v1.Models.TransmissionViewModel"];
      /**
       * Format: int32
       * @description Кол-во мест
       */
      seatCount?: number | null;
      /**
       * Format: int32
       * @description Масса ТС без нагрузки
       */
      unladenWeight?: number | null;
      /**
       * Format: int32
       * @description Максимально допустимая масса ТС (с нагрузкой)
       */
      maxWeight?: number | null;
    };
    /** @description Полная информация о ТС */
    "Sravni.Auto.Service.v1.Models.CarInfoViewModel": {
      brand?: components["schemas"]["Sravni.Auto.Service.v1.Models.BrandViewModel"];
      model?: components["schemas"]["Sravni.Auto.Service.v1.Models.ModelViewModel"];
      modification?: components["schemas"]["Sravni.Auto.Service.v1.Models.ModificationViewModel"];
      body?: components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"];
    };
    /** @description Модель запроса для сервиса checkperson.ru */
    "Sravni.Auto.Service.v1.Models.Dto.CheckPersonRequest": {
      /** @description Имя */
      firstName?: string | null;
      /** @description Отчество */
      middleName?: string | null;
      /** @description Фамилия */
      lastName?: string | null;
      /**
       * Format: date-time
       * @description Дата рождения
       */
      birthDate?: string;
      /** @description Серия и номер паспорта */
      passport?: string | null;
      /** @description ФИО */
      fullName?: string | null;
    };
    /** @description Модель ответа от парсеров с номером полиса и т.д. */
    "Sravni.Auto.Service.v1.Models.Dto.ParserApiInfo": {
      /** @description компания, выдавшая полис */
      companyName?: string | null;
      /** @description номер полиса */
      policyNumber?: string | null;
      /** @description серия полиса */
      policySerial?: string | null;
      /** @description дата начала действия */
      policyStartDate?: string | null;
      /** @description дата окончания действия */
      policyEndDate?: string | null;
      /** @description VIN автомобиля */
      vin?: string | null;
      /** @description гос номер */
      carNumber?: string | null;
      /** @description номер кузова */
      bodyNumber?: string | null;
      /** @description номер шасси */
      chassisNumber?: string | null;
      /** @description Такси? */
      isTaxi?: boolean | null;
      /** @description Регион использования */
      location?: string | null;
      /**
       * Format: double
       * @description страховая премия
       */
      cost?: number;
      /** @description Страхователь ДР */
      insurantBirthDate?: string | null;
      /** @description Страхователь ФИО */
      insurantName?: string | null;
      /**
       * Format: double
       * @description КБМ по договору ОСАГО
       */
      kbm?: number;
      /** @description Собственник ДР */
      ownerBirthDate?: string | null;
      /** @description Собственник ФИО */
      ownerName?: string | null;
      /** @description Полис приобретен через платформу "Сравни.ру" */
      isPurchasedViaSravni?: boolean;
      /**
       * Format: int32
       * @description кол-во водителей
       */
      driversCount?: number;
      /**
       * Format: int32
       * @description мощность двигателя
       */
      power?: number | null;
    };
    /** @description Цены на модель авто */
    "Sravni.Auto.Service.v1.Models.ModelAveragePriceResult": {
      /**
       * Format: int32
       * @description Минимальная цена на модель авто
       */
      minPrice?: number;
      /**
       * Format: int32
       * @description Средняя цена на модель авто
       */
      averagePrice?: number;
      /**
       * Format: int32
       * @description Максимальная цена на модель авто
       */
      maxPrice?: number;
    };
    /** @description Модель вью модели авто */
    "Sravni.Auto.Service.v1.Models.ModelViewModel": {
      /**
       * Format: int32
       * @description Id
       */
      id?: number;
      /** @description Название */
      name?: string | null;
      /** @description Название русское */
      nameRus?: string | null;
      /** @description Алиас */
      alias?: string | null;
      categories?: string[] | null;
      /**
       * Format: int32
       * @description Id Бренда
       */
      brandId?: number;
    };
    /** @description Модель вью модификации авто */
    "Sravni.Auto.Service.v1.Models.ModificationViewModel": {
      /**
       * Format: int32
       * @description Id
       */
      id?: number;
      /** @description Название */
      name?: string | null;
      body?: components["schemas"]["Sravni.Auto.Car.BodyStyle"];
      /**
       * Format: double
       * @description Обьем двигателя
       */
      volume?: number | null;
      /**
       * Format: int32
       * @description Мощность л.с.
       */
      power?: number | null;
      transmission?: components["schemas"]["Sravni.Auto.Car.TransmissionType"];
      /**
       * Format: int32
       * @description Цена
       */
      price?: number;
      /** @description Категория ВУ для управления данным ТС */
      category?: string | null;
      fuel?: components["schemas"]["Sravni.Auto.Engine.EngineFuelType"];
      /**
       * Format: int32
       * @description кол-во дверей
       */
      doorsCount?: number | null;
      /** @description Код трансдекры */
      transdekraCode?: string | null;
      /** @description Код РСА */
      rsaCode?: string | null;
      /**
       * Format: int32
       * @description Год начала производства
       */
      inProductionFrom?: number | null;
      /**
       * Format: int32
       * @description Год конца производства
       */
      inProductionTo?: number | null;
    };
    /** @description Модель вью модификации авто */
    "Sravni.Auto.Service.v1.Models.ModificationWithShortNameViewModel": {
      /**
       * Format: int32
       * @description Id
       */
      id?: number;
      /** @description Название */
      name?: string | null;
      body?: components["schemas"]["Sravni.Auto.Car.BodyStyle"];
      /**
       * Format: double
       * @description Обьем двигателя
       */
      volume?: number | null;
      /**
       * Format: int32
       * @description Мощность л.с.
       */
      power?: number | null;
      transmission?: components["schemas"]["Sravni.Auto.Car.TransmissionType"];
      /**
       * Format: int32
       * @description Цена
       */
      price?: number;
      /** @description Категория ВУ для управления данным ТС */
      category?: string | null;
      fuel?: components["schemas"]["Sravni.Auto.Engine.EngineFuelType"];
      /**
       * Format: int32
       * @description кол-во дверей
       */
      doorsCount?: number | null;
      /** @description Код трансдекры */
      transdekraCode?: string | null;
      /** @description Код РСА */
      rsaCode?: string | null;
      /**
       * Format: int32
       * @description Год начала производства
       */
      inProductionFrom?: number | null;
      /**
       * Format: int32
       * @description Год конца производства
       */
      inProductionTo?: number | null;
      /** @description Короткое Название */
      shortName?: string | null;
    };
    /** @description Модель вью для результата поиска модификаций */
    "Sravni.Auto.Service.v1.Models.ModificationsResult": {
      /** @description Список уникальных кузовов из Modifications */
      bodies?: components["schemas"]["Sravni.Auto.Service.v1.Models.BodyViewModel"][] | null;
      /** @description Список уникальных коробок передач из Modifications */
      transmissions?: components["schemas"]["Sravni.Auto.Service.v1.Models.TransmissionViewModel"][] | null;
      /** @description Список модификаций */
      modifications?: components["schemas"]["Sravni.Auto.Service.v1.Models.ModificationViewModel"][] | null;
    };
    /** @description Информация о прошлом полисе для партнеров */
    "Sravni.Auto.Service.v1.Models.PartnerApiPolicyInfoResponse": {
      /**
       * Format: date-time
       * @description Дата окончания полиса
       */
      policyEndDate?: string;
      /** @description Прошлая СК */
      companyName?: string | null;
      /** @description Истекает срок действия полиса */
      isExpiring?: boolean;
    };
    "Sravni.Auto.Service.v1.Models.PartnerResponse`1[[Sravni.Auto.Service.v1.Models.CarInfoByNumber, Sravni.Auto.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      result?: components["schemas"]["Sravni.Auto.Service.v1.Models.CarInfoByNumber"];
      /** Format: int32 */
      availableLimit?: number;
      error?: string | null;
      original?: Record<string, unknown> | null;
    };
    "Sravni.Auto.Service.v1.Models.PartnerResponse`1[[Sravni.Auto.Service.v1.Models.PartnerApiPolicyInfoResponse, Sravni.Auto.Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
      result?: components["schemas"]["Sravni.Auto.Service.v1.Models.PartnerApiPolicyInfoResponse"];
      /** Format: int32 */
      availableLimit?: number;
      error?: string | null;
      original?: Record<string, unknown> | null;
    };
    /** @description Модель вью коробки передач авто */
    "Sravni.Auto.Service.v1.Models.TransmissionViewModel": {
      /**
       * Format: int32
       * @description Id
       */
      id?: number;
      /** @description Название */
      name?: string | null;
    };
    "Sravni.Auto.Service.v1.Services.Engine": {
      power?: components["schemas"]["Sravni.Auto.Service.v1.Services.Power"];
      /** Format: int32 */
      volume?: number;
    };
    "Sravni.Auto.Service.v1.Services.Power": {
      /** Format: double */
      kvt?: number;
      /** Format: double */
      lc?: number;
    };
    "Sravni.Auto.Service.v1.Services.Vehicle": {
      marka?: string | null;
      model?: string | null;
      vin?: string | null;
      body?: string | null;
      grzList?: string[] | null;
      /** Format: int32 */
      issueYear?: number;
      engine?: components["schemas"]["Sravni.Auto.Service.v1.Services.Engine"];
      type?: components["schemas"]["Sravni.Auto.Service.v1.Services.VehicleType"];
    };
    "Sravni.Auto.Service.v1.Services.VehicleType": {
      description?: string | null;
      /** Format: int32 */
      code?: number;
    };
    "Sravni.Micro.Errors.Error": {
      code?: string | null;
      target?: string | null;
      message?: string | null;
      attemptedValue?: string | null;
      details?: components["schemas"]["Sravni.Micro.Errors.Error"][] | null;
    };
    "Sravni.Micro.Errors.ErrorModel": {
      error?: components["schemas"]["Sravni.Micro.Errors.Error"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
