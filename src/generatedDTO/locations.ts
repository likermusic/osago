/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/dadata/address": {
    /**
     * запрос в дадату по адресу
     * @deprecated
     * @description Используйте сервис Sravni.Dadata.Service /v1.0/clean/address
     */
    get: {
      parameters: {
        query?: {
          /** @description адрес который надо пропустить через дадату */
          address?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Locations.AnalyseAddressResult"];
            "application/json": components["schemas"]["Sravni.Locations.AnalyseAddressResult"];
            "text/json": components["schemas"]["Sravni.Locations.AnalyseAddressResult"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/locations/by-alias/{alias}": {
    /** Возвращает локацию по её алиасу. */
    get: {
      parameters: {
        path: {
          /** @description Алиас локации */
          alias: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Locations.Locality"];
            "application/json": components["schemas"]["Sravni.Locations.Locality"];
            "text/json": components["schemas"]["Sravni.Locations.Locality"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Если локация с таким алиасом не найдена */
        404: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/locations": {
    /**
     * Ищет населённые пункты по route, одному id и нескольком id
     * @description запрос по route , limit
     * ```
     * locations?route={route:optional}&limit={limit:optional}
     * ```
     * запрос по нескольким id
     * ```
     * locations?ids={id},{id},..,{id}
     * ```
     */
    get: {
      parameters: {
        query?: {
          /** @description Один или несколько идектификаторов через запятую. */
          ids?: number[];
          /** @description канонический id территории. если заканчивается на * ищет все входящие */
          route?: string;
          /** @description Максимальное количество результатов поиска */
          limit?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Locations.Locality"][];
            "application/json": components["schemas"]["Sravni.Locations.Locality"][];
            "text/json": components["schemas"]["Sravni.Locations.Locality"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/locations/regions": {
    /** Возвращает все субъекты федерации. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Locations.Locality"][];
            "application/json": components["schemas"]["Sravni.Locations.Locality"][];
            "text/json": components["schemas"]["Sravni.Locations.Locality"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/locations/regional-centers": {
    /** Возвращает список региональных центров. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Locations.Locality"][];
            "application/json": components["schemas"]["Sravni.Locations.Locality"][];
            "text/json": components["schemas"]["Sravni.Locations.Locality"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/locations/top": {
    /** Возвращает список популярных городов. */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Locations.Locality"][];
            "application/json": components["schemas"]["Sravni.Locations.Locality"][];
            "text/json": components["schemas"]["Sravni.Locations.Locality"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/locations/region": {
    /** поиск региона у нас в бд по адресу */
    get: {
      parameters: {
        query?: {
          /** @description адрес который надо пропустить через дадату и найти в каком это регионе */
          address?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Locations.Locality"];
            "application/json": components["schemas"]["Sravni.Locations.Locality"];
            "text/json": components["schemas"]["Sravni.Locations.Locality"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/locations/settlement": {
    /** поиск населенного пункта у нас в бд по адресу */
    get: {
      parameters: {
        query: {
          /** @description адрес который надо пропустить через дадату и найти в каком это НС */
          address: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Locations.Locality"];
            "application/json": components["schemas"]["Sravni.Locations.Locality"];
            "text/json": components["schemas"]["Sravni.Locations.Locality"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/suggest": {
    /** Поиск населённого пункта по началу названия */
    get: {
      parameters: {
        query?: {
          /** @description фрагмент названия */
          q?: string;
          /** @description максимальное количество результатов */
          limit?: number;
          /** @description добавляет в ответе деревни, поселки, села, пгт и тд */
          includeVillages?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Locations.Locality"][];
            "application/json": components["schemas"]["Sravni.Locations.Locality"][];
            "text/json": components["schemas"]["Sravni.Locations.Locality"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
  "/v1/suggest/addresses": {
    /**
     * подсказки по части названия
     * @deprecated
     * @description Используйте сервис Sravni.Dadata.Service /v1.0/suggest/address
     */
    get: {
      parameters: {
        query?: {
          /** @description фрагмент названия */
          q?: string;
          /** @description глубина подсказки (region,city,settlement,street,house,flat) */
          toBound?: string;
          /** @description максимальное количество результатов (не больше 10) */
          limit?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Sravni.Locations.SuggestionResult"][];
            "application/json": components["schemas"]["Sravni.Locations.SuggestionResult"][];
            "text/json": components["schemas"]["Sravni.Locations.SuggestionResult"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "application/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
            "text/json": components["schemas"]["Sravni.Micro.Errors.ErrorModel"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    "Sravni.Locations.AnalyseAddressResult": {
      source?: string | null;
      result?: string | null;
      postal_code?: string | null;
      country?: string | null;
      region_fias_id?: string | null;
      region_kladr_id?: string | null;
      region_with_type?: string | null;
      region_type?: string | null;
      region_type_full?: string | null;
      region?: string | null;
      area_fias_id?: string | null;
      area_kladr_id?: string | null;
      area_with_type?: string | null;
      area_type?: string | null;
      area_type_full?: string | null;
      area?: string | null;
      city_fias_id?: string | null;
      city_kladr_id?: string | null;
      city_with_type?: string | null;
      city_type?: string | null;
      city_type_full?: string | null;
      city?: string | null;
      city_area?: string | null;
      city_district_fias_id?: string | null;
      city_district_kladr_id?: string | null;
      city_district_with_type?: string | null;
      city_district_type?: string | null;
      city_district_type_full?: string | null;
      city_district?: string | null;
      settlement_fias_id?: string | null;
      settlement_kladr_id?: string | null;
      settlement_with_type?: string | null;
      settlement_type?: string | null;
      settlement_type_full?: string | null;
      settlement?: string | null;
      street_fias_id?: string | null;
      street_kladr_id?: string | null;
      street_with_type?: string | null;
      street_type?: string | null;
      street_type_full?: string | null;
      street?: string | null;
      house_fias_id?: string | null;
      house_kladr_id?: string | null;
      house_with_type?: string | null;
      house_type?: string | null;
      house_type_full?: string | null;
      house?: string | null;
      block_type?: string | null;
      block_type_full?: string | null;
      block?: string | null;
      flat_type?: string | null;
      flat_type_full?: string | null;
      flat?: string | null;
      /** Format: double */
      flat_area?: number | null;
      square_meter_price?: string | null;
      /** Format: double */
      flat_price?: number | null;
      postal_box?: string | null;
      fias_id?: string | null;
      fias_level?: string | null;
      kladr_id?: string | null;
      capital_marker?: string | null;
      okato?: string | null;
      oktmo?: string | null;
      tax_office?: string | null;
      tax_office_legal?: string | null;
      timezone?: string | null;
      /** Format: double */
      geo_lat?: number | null;
      /** Format: double */
      geo_lon?: number | null;
      beltway_hit?: string | null;
      beltway_distance?: string | null;
      /** Format: int32 */
      qc_geo?: number | null;
      /** Format: int32 */
      qc_complete?: number | null;
      /** Format: int32 */
      qc_house?: number | null;
      /** Format: int32 */
      qc?: number | null;
      unparsed_parts?: string | null;
    };
    /** @description Населённый пункт */
    "Sravni.Locations.Locality": {
      /**
       * Format: int32
       * @description Идентификатор
       */
      id?: number;
      /** @description Название */
      name?: string | null;
      /** @description Полное название */
      fullName?: string | null;
      /** @description Название региона */
      regionName?: string | null;
      /** @description Название в местном падеже с предлогом (в Москве, во Владивостоке) */
      nameLocative?: string | null;
      /** @description Название в родительном падеже (Москвы, Владивостока) */
      nameGenitive?: string | null;
      /** @description Роут */
      route?: string | null;
      /** @description Уникальный алиас */
      alias?: string | null;
      /** @description Тип населённого пункта */
      localityType?: string | null;
      /** @description Тип населённого пункта (сокращенное наименование) */
      shortLocationType?: string | null;
      /**
       * Format: double
       * @description широта
       */
      latitude?: number;
      /**
       * Format: double
       * @description долгота
       */
      longitude?: number;
      /**
       * Format: int32
       * @description Порядок сортировки (от большего к меньшему)
       */
      priority?: number | null;
      /**
       * Format: uuid
       * @description Классификатор ФИАС
       */
      fias?: string | null;
      /** @description Классификатор КЛАДР */
      kladr?: string | null;
      /** @description Код региона */
      regionCode?: string | null;
      /** @description ОКАТО */
      okato?: string | null;
      /** @description ОКТМО */
      oktmo?: string | null;
    };
    "Sravni.Locations.SuggestionResult": {
      value?: string | null;
      kladrId?: string | null;
      fiasId?: string | null;
      fiasLevel?: string | null;
      /** Format: double */
      flatArea?: number | null;
      postalCode?: string | null;
      /** Format: double */
      flatPrice?: number;
      flat?: string | null;
      /** Format: double */
      longitude?: number;
      /** Format: double */
      latitude?: number;
      isFinal?: boolean;
    };
    "Sravni.Micro.Errors.Error": {
      code?: string | null;
      target?: string | null;
      message?: string | null;
      attemptedValue?: string | null;
      details?: components["schemas"]["Sravni.Micro.Errors.Error"][] | null;
    };
    "Sravni.Micro.Errors.ErrorModel": {
      error?: components["schemas"]["Sravni.Micro.Errors.Error"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
